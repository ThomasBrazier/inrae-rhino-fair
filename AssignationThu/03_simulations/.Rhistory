}
for (f in 1:length(lfiles)) {
file.rename(from=lfiles[f],to=sub("36","20",lfiles[f]))
}
for (f in 1:length(lfiles)) {
file.rename(from=lfiles[f],to=sub("37","28",lfiles[f]))
}
for (f in 1:length(lfiles)) {
file.rename(from=lfiles[f],to=sub("38","29",lfiles[f]))
}
setwd(wd)
#-----------------------------#
# SENSITIVITY ANALYSES
# COUNT TABLES
#-----------------------------
# tableau de comptage des individus dans les differentes categories (true, type I or II error...)
# pour chaque simulation
# tableau de comparaison des nombres d'individus moyens et SD sur n runs
# saved dans le fichier simSensitivity.txt
# 1/ path = simulations a comparer
# 2/ run = nombre de runs utilises pour les estimations
tabSensitivity=sensitivityResults(path=c("simRandomPop",
"simRandomPopIncomplete"),29)
#-----------------------------#
# MANIPULATION DES FICHIERS
#-----------------------------
# renommer les fichiers du jeu de donnees
# changer 48 en 2400 par ex.
setwd("simRandomPopIncomplete")
lfiles=list.files(path=".")
for (f in 1:length(lfiles)) {
file.rename(from=lfiles[f],to=sub("31","9",lfiles[f]))
}
for (f in 1:length(lfiles)) {
file.rename(from=lfiles[f],to=sub("32","10",lfiles[f]))
}
for (f in 1:length(lfiles)) {
file.rename(from=lfiles[f],to=sub("33","20",lfiles[f]))
}
for (f in 1:length(lfiles)) {
file.rename(from=lfiles[f],to=sub("34","29",lfiles[f]))
}
setwd(wd)
#-----------------------------#
# SENSITIVITY ANALYSES
# COUNT TABLES
#-----------------------------
# tableau de comptage des individus dans les differentes categories (true, type I or II error...)
# pour chaque simulation
# tableau de comparaison des nombres d'individus moyens et SD sur n runs
# saved dans le fichier simSensitivity.txt
# 1/ path = simulations a comparer
# 2/ run = nombre de runs utilises pour les estimations
tabSensitivity=sensitivityResults(path=c("simRandomPop",
"simRandomPopIncomplete"),29)
View(tabSensitivity)
# DIRECTORIES
if (Sys.info()["sysname"]=="Darwin") {
setwd("/Volumes/Samsung_T5/INRA RHINO/R/Assignation/03_simulations/")
wd="/Volumes/Samsung_T5/INRA RHINO/R/Assignation/03_simulations/"
graphdir="/Volumes/Samsung_T5/INRA RHINO/R/Graph/"
Rdir="/Volumes/Samsung_T5/INRA RHINO/R/"
source("fonctionsPrepaSim.R")
}else {
if (Sys.info()["sysname"]=="Windows"){
setwd("E:/INRA RHINO/R/Assignation/03_simulations/")
wd="E:/INRA RHINO/R/Assignation/03_simulations/"
graphdir="E:/INRA RHINO/R/Graph/"
Rdir="E:/INRA RHINO/R/"
source("fonctionsPrepaSim.R")
}
}
# 1/ Proba de detection
# Les individus sont retires aleatoirement du fichier COLONY.DAT selon un tirage sans remise
# Proportion d'individus retires de chaque categorie fixee en argument
# - Unsampled, sous la forme d'un vecteur c(males, femelles, juv)
# Si les valeurs sont superieures a 1, elles sont prises comme des effectifs et non des proportions
# 2/ Erreurs de genotypages
# Sur les individus restants, une proportion d'entre eux est aleatoirement selectionnee pour avoir un genotype incomplet
# Les alleles sont retires selon une probabilite fixee en argument
# - propIncomplete (si proportion > 1, alors on considere que c'est un effectif a retirer)
# - probMissingLocus
CreateScenario(name="simRandomPop2",unsampled=c(0.44,0.06,0.06),propIncomplete=0,probMissingLocus=0)
# 1/ Proba de detection
# Les individus sont retires aleatoirement du fichier COLONY.DAT selon un tirage sans remise
# Proportion d'individus retires de chaque categorie fixee en argument
# - Unsampled, sous la forme d'un vecteur c(males, femelles, juv)
# Si les valeurs sont superieures a 1, elles sont prises comme des effectifs et non des proportions
# 2/ Erreurs de genotypages
# Sur les individus restants, une proportion d'entre eux est aleatoirement selectionnee pour avoir un genotype incomplet
# Les alleles sont retires selon une probabilite fixee en argument
# - propIncomplete (si proportion > 1, alors on considere que c'est un effectif a retirer)
# - probMissingLocus
CreateScenario(name="simRandomPop2",unsampled=c(0.44,0.06,0.06),propIncomplete=0,probMissingLocus=0)
# 1/ Proba de detection
# Les individus sont retires aleatoirement du fichier COLONY.DAT selon un tirage sans remise
# Proportion d'individus retires de chaque categorie fixee en argument
# - Unsampled, sous la forme d'un vecteur c(males, femelles, juv)
# Si les valeurs sont superieures a 1, elles sont prises comme des effectifs et non des proportions
# 2/ Erreurs de genotypages
# Sur les individus restants, une proportion d'entre eux est aleatoirement selectionnee pour avoir un genotype incomplet
# Les alleles sont retires selon une probabilite fixee en argument
# - propIncomplete (si proportion > 1, alors on considere que c'est un effectif a retirer)
# - probMissingLocus
CreateScenario(name="simRandomPop2",unsampled=c(0.44,0.06,0.06),propIncomplete=0,probMissingLocus=0)
# 1/ Proba de detection
# Les individus sont retires aleatoirement du fichier COLONY.DAT selon un tirage sans remise
# Proportion d'individus retires de chaque categorie fixee en argument
# - Unsampled, sous la forme d'un vecteur c(males, femelles, juv)
# Si les valeurs sont superieures a 1, elles sont prises comme des effectifs et non des proportions
# 2/ Erreurs de genotypages
# Sur les individus restants, une proportion d'entre eux est aleatoirement selectionnee pour avoir un genotype incomplet
# Les alleles sont retires selon une probabilite fixee en argument
# - propIncomplete (si proportion > 1, alors on considere que c'est un effectif a retirer)
# - probMissingLocus
CreateScenario(name="simRandomPop2",unsampled=c(0.44,0.06,0.06),propIncomplete=0,probMissingLocus=0)
# Replication du jeu de donnees .Dat simule en n exemplaires identiques avec une graine aleatoire differente
replicateSim("simRandomPop2",30)
simShellCmd("simRandomPop",30)
#-----------------------------#
# SENSITIVITY ANALYSES
# COUNT TABLES
#-----------------------------
# tableau de comptage des individus dans les differentes categories (true, type I or II error...)
# pour chaque simulation
# tableau de comparaison des nombres d'individus moyens et SD sur n runs
# saved dans le fichier simSensitivity.txt
# 1/ path = simulations a comparer
# 2/ run = nombre de runs utilises pour les estimations
tabSensitivity=sensitivityResults(path=c("simRandomPop",
"simRandomPopIncomplete"),29)
if (Sys.info()["sysname"]=="Darwin") {
setwd("/Volumes/Samsung_T5/INRA RHINO/R/Assignation")
source("fonctionsSim.R")
wd="/Volumes/Samsung_T5/INRA RHINO/R/Assignation/04_data/outputs/"
graphdir="/Volumes/Samsung_T5/INRA RHINO/R/Graph"
setwd(wd)
}else {
if (Sys.info()["sysname"]=="Windows"){
setwd("E:/INRA RHINO/R/Assignation")
source("fonctionsSim.R")
wd="E:/INRA RHINO/R/Assignation/04_data/outputs/"
graphdir="E:/INRA RHINO/R/Graph"
setwd(wd)
}
}
#-----------------------------#
# SENSITIVITY ANALYSES
# COUNT TABLES
#-----------------------------
# tableau de comptage des individus dans les differentes categories (true, type I or II error...)
# pour chaque simulation
# tableau de comparaison des nombres d'individus moyens et SD sur n runs
# saved dans le fichier simSensitivity.txt
# 1/ path = simulations a comparer
# 2/ run = nombre de runs utilises pour les estimations
tabSensitivity=sensitivityResults(path=c("simRandomPop",
"simRandomPopIncomplete"),29)
View(tabSensitivity)
if (Sys.info()["sysname"]=="Darwin") {
setwd("/Volumes/Samsung_T5/INRA RHINO/R/Assignation")
source("fonctionsSim.R")
wd="/Volumes/Samsung_T5/INRA RHINO/R/Assignation/04_data/outputs/"
graphdir="/Volumes/Samsung_T5/INRA RHINO/R/Graph"
setwd(wd)
}else {
if (Sys.info()["sysname"]=="Windows"){
setwd("E:/INRA RHINO/R/Assignation")
source("fonctionsSim.R")
wd="E:/INRA RHINO/R/Assignation/04_data/outputs/"
graphdir="E:/INRA RHINO/R/Graph"
setwd(wd)
}
}
#-----------------------------#
# SENSITIVITY ANALYSES
# COUNT TABLES
#-----------------------------
# tableau de comptage des individus dans les differentes categories (true, type I or II error...)
# pour chaque simulation
# tableau de comparaison des nombres d'individus moyens et SD sur n runs
# saved dans le fichier simSensitivity.txt
# 1/ path = simulations a comparer
# 2/ run = nombre de runs utilises pour les estimations
tabSensitivity=sensitivityResults(path=c("simRandomPop",
"simRandomPopIncomplete"),29)
# DIRECTORIES
if (Sys.info()["sysname"]=="Darwin") {
setwd("/Volumes/Samsung_T5/INRA RHINO/R/AssignationThu/03_simulations/")
wd="/Volumes/Samsung_T5/INRA RHINO/R/AssignationThu/03_simulations/"
graphdir="/Volumes/Samsung_T5/INRA RHINO/R/Graph/"
Rdir="/Volumes/Samsung_T5/INRA RHINO/R/"
source("fonctionsPrepaSim.R")
}else {
if (Sys.info()["sysname"]=="Windows"){
setwd("E:/INRA RHINO/R/AssignationThu/03_simulations/")
wd="E:/INRA RHINO/R/Assignation/03_simulations/"
graphdir="E:/INRA RHINO/R/Graph/"
Rdir="E:/INRA RHINO/R/"
source("fonctionsPrepaSim.R")
}
}
#----------------------------------#
# FREQUENCES ALLELIQUES ALLEMANDES
#----------------------------------
library(related)
info=read.table("uniqueGenotypesWithInfo.txt",h=T)
write.table(info[,1:17],"genotypeData.txt",sep=" ",col.names = FALSE,row.names = FALSE)
#----------------------------------#
# FREQUENCES ALLELIQUES ALLEMANDES
#----------------------------------
library(related)
info=read.table("uniqueGenotypesWithInfo.txt",h=T)
write.table(info[,1:17],"genotypeData.txt",sep=" ",col.names = FALSE,row.names = FALSE)
allelFreq=readgenotypedata("genotypeData.txt")$freqs
for (i in 1:8) {
print(t(allelFreq[1]))
}
View(allelFreq)
t(allelFreq[1])
t(allelFreq[1])
print(unlist(t(allelFreq[1])))
for (i in 1:8) {
print(unlist(t(allelFreq[i])))
}
paste(unlist(t(allelFreq[i])),collapse=" ")
allelFreq[i]
allelFreq[i,2]
allelFreq[[i]]
allelFreq[[i,2]]
t(allelFreq[[i]])
t(allelFreq[[i]])[2]
t(allelFreq[[i]])[2,]
f=c()
for (i in 1:8) {
print(unlist(t(allelFreq[i])))
f=c(f,paste(unlist(t(allelFreq[[i]])[2,]),collapse=" "))
}
f
write.table(f,"FreqAllelique.txt")
write.table(f,"FreqAllelique.txt",col.names=F,row.names=F)
f
as.numeric(f)
f
as.vector(f)
as.factor(f)
write.table(as.factor(f),"FreqAllelique.txt",col.names=F,row.names=F)
paste(unlist(t(allelFreq[[i]])[2,]),collapse=" ")
as.factor(paste(unlist(t(allelFreq[[i]])[2,]),collapse=" "))
f=c()
for (i in 1:8) {
print(unlist(t(allelFreq[i])))
f=c(f,as.factor(paste(unlist(t(allelFreq[[i]])[2,]),collapse=" ")))
}
f
f=c()
for (i in 1:8) {
print(unlist(t(allelFreq[i])))
f=c(f,paste(unlist(t(allelFreq[[i]])[2,]),collapse=" "))
}
write.table(f,"FreqAllelique.txt",col.names=F,row.names=F)
fAllel=read.table("FreqAllelique.txt",fill=TRUE)
View(fAllel)
##### CONSTRUCTION DE L'INPUT POUR SIMULATION
# Met en forme le fichier Input.Par
# avec les parametres choisis et la matrice d'accouplement
# 1/ n transmis a la fonction MatingMatrix()
# 2/ t transmis a la fonction MatingMatrix()
# 3/ pop, taille de la popualtion simulee, qui sera arrondie a l'inferieur pour etre un multiple de la taille de la mating matrix
ConstructSimInput(n=10,t=4,pop=4000,name="Simulation")
# DIRECTORIES
if (Sys.info()["sysname"]=="Darwin") {
setwd("/Volumes/Samsung_T5/INRA RHINO/R/AssignationThu/03_simulations/")
wd="/Volumes/Samsung_T5/INRA RHINO/R/AssignationThu/03_simulations/"
graphdir="/Volumes/Samsung_T5/INRA RHINO/R/Graph/"
Rdir="/Volumes/Samsung_T5/INRA RHINO/R/"
source("fonctionsPrepaSim.R")
}else {
if (Sys.info()["sysname"]=="Windows"){
setwd("E:/INRA RHINO/R/AssignationThu/03_simulations/")
wd="E:/INRA RHINO/R/AssignationThu/03_simulations/"
graphdir="E:/INRA RHINO/R/Graph/"
Rdir="E:/INRA RHINO/R/"
source("fonctionsPrepaSim.R")
}
}
##### CONSTRUCTION DE L'INPUT POUR SIMULATION
# Met en forme le fichier Input.Par
# avec les parametres choisis et la matrice d'accouplement
# 1/ n transmis a la fonction MatingMatrix()
# 2/ t transmis a la fonction MatingMatrix()
# 3/ pop, taille de la popualtion simulee, qui sera arrondie a l'inferieur pour etre un multiple de la taille de la mating matrix
ConstructSimInput(n=10,t=4,pop=4000,name="Simulation")
##### CONSTRUCTION DE L'INPUT POUR SIMULATION
# Met en forme le fichier Input.Par
# avec les parametres choisis et la matrice d'accouplement
# 1/ n transmis a la fonction MatingMatrix()
# 2/ t transmis a la fonction MatingMatrix()
# 3/ pop, taille de la popualtion simulee, qui sera arrondie a l'inferieur pour etre un multiple de la taille de la mating matrix
ConstructSimInput(n=10,t=4,pop=4000,name="Simulation")
# 1/ Proba de detection
# Les individus sont retires aleatoirement du fichier COLONY.DAT selon un tirage sans remise
# Proportion d'individus retires de chaque categorie fixee en argument
# - Unsampled, sous la forme d'un vecteur c(males, femelles, juv)
# Si les valeurs sont superieures a 1, elles sont prises comme des effectifs et non des proportions
# 2/ Erreurs de genotypages
# Sur les individus restants, une proportion d'entre eux est aleatoirement selectionnee pour avoir un genotype incomplet
# Les alleles sont retires selon une probabilite fixee en argument
# - propIncomplete (si proportion > 1, alors on considere que c'est un effectif a retirer)
# - probMissingLocus
CreateScenario(name="simRandomPopThu",unsampled=c(0.44,0.06,0.06),propIncomplete=0,probMissingLocus=0)
# DIRECTORIES
if (Sys.info()["sysname"]=="Darwin") {
setwd("/Volumes/Samsung_T5/INRA RHINO/R/NMpi")
source("fonctionsNMpi.R")
wd="/Volumes/Samsung_T5/INRA RHINO/R/NMpi/"
graphdir="/Volumes/Samsung_T5/INRA RHINO/R/Graph"
setwd(wd)
info = read.table("uniqueGenotypesWithInfo.txt", h = T)
coord = read.table("coordpic.txt", h = T)
}else {
if (Sys.info()["sysname"]=="Windows"){
setwd("E:/INRA RHINO/R/NMpi")
source("fonctionsNMpi.R")
wd="E:/INRA RHINO/R/NMpi/"
graphdir="E:/INRA RHINO/R/Graph"
setwd(wd)
info = read.table("uniqueGenotypesWithInfo.txt", h = T)
coord = read.table("coordpic.txt", h = T)
}
}
# donnes en coordonnees cartesiennes
library(SpatialEpi)
cartesian=coord
# donnes en coordonnees cartesiennes
library(SpatialEpi)
cartesian=coord
cartesian[,2:3]=latlong2grid(coord[,2:3])
View(cartesian)
?latlong2grid
install.packages("sp")
library(sp)
?spDist
?spDists
cartesian[,2:3]=spDists(coord[,2:3],coord[1,2:3],longlat=TRUE)
coord[,2:3]
cartesian[,2:3]=spDists(as.matrix(coord[,2:3]),coord[1,2:3],longlat=TRUE)
View(cartesian)
# DIRECTORIES
if (Sys.info()["sysname"]=="Darwin") {
setwd("/Volumes/Samsung_T5/INRA RHINO/R/NMpi")
source("fonctionsNMpi.R")
wd="/Volumes/Samsung_T5/INRA RHINO/R/NMpi/"
graphdir="/Volumes/Samsung_T5/INRA RHINO/R/Graph"
setwd(wd)
info = read.table("uniqueGenotypesWithInfo.txt", h = T)
coord = read.table("coordpic.txt", h = T)
}else {
if (Sys.info()["sysname"]=="Windows"){
setwd("E:/INRA RHINO/R/NMpi")
source("fonctionsNMpi.R")
wd="E:/INRA RHINO/R/NMpi/"
graphdir="E:/INRA RHINO/R/Graph"
setwd(wd)
info = read.table("uniqueGenotypesWithInfo.txt", h = T)
coord = read.table("coordpic.txt", h = T)
}
}
inputNMpi(dir="",project="RhinoNMpiTry",year="all",dropout=TRUE)
inputNMpi(dir="2013/",project="RhinoNMpiTry",year="2013",dropout=TRUE)
#----------------------------------#
# FREQUENCES ALLELIQUES ALLEMANDES
#----------------------------------
library(related)
info=read.table("uniqueGenotypesWithInfo.txt",h=T)
write.table(info[,1:17],"genotypeData.txt",sep=" ",col.names = FALSE,row.names = FALSE)
allelFreq=readgenotypedata("genotypeData.txt")$freqs
f=c()
for (i in 1:8) {
print(unlist(t(allelFreq[i])))
f=c(f,paste(unlist(t(allelFreq[[i]])[2,]),collapse=" "))
}
f
allelFreq[[i]])[2,]
t(allelFreq[[i]])[2,]
allelFreq[[i]]
round(allelFreq[[i]])
,round
?round
round(allelFreq[[i]],digits=3)
f=c()
for (i in 1:8) {
print(unlist(t(allelFreq[i])))
f=c(f,paste(unlist(t(round(allelFreq[[i]],digits=3))[2,]),collapse=" "))
}
f=c()
for (i in 1:8) {
f=c(f,paste(unlist(t(round(allelFreq[[i]],digits=3))[2,]),collapse=" "))
}
write.table(f,"FreqAllelique.txt",col.names=F,row.names=F)
##### CONSTRUCTION DE L'INPUT POUR SIMULATION
# Met en forme le fichier Input.Par
# avec les parametres choisis et la matrice d'accouplement
# 1/ n transmis a la fonction MatingMatrix()
# 2/ t transmis a la fonction MatingMatrix()
# 3/ pop, taille de la popualtion simulee, qui sera arrondie a l'inferieur pour etre un multiple de la taille de la mating matrix
ConstructSimInput(n=10,t=4,pop=4000,name="Simulation")
# DIRECTORIES
if (Sys.info()["sysname"]=="Darwin") {
setwd("/Volumes/Samsung_T5/INRA RHINO/R/AssignationThu/03_simulations/")
wd="/Volumes/Samsung_T5/INRA RHINO/R/AssignationThu/03_simulations/"
graphdir="/Volumes/Samsung_T5/INRA RHINO/R/Graph/"
Rdir="/Volumes/Samsung_T5/INRA RHINO/R/"
source("fonctionsPrepaSim.R")
}else {
if (Sys.info()["sysname"]=="Windows"){
setwd("E:/INRA RHINO/R/AssignationThu/03_simulations/")
wd="E:/INRA RHINO/R/AssignationThu/03_simulations/"
graphdir="E:/INRA RHINO/R/Graph/"
Rdir="E:/INRA RHINO/R/"
source("fonctionsPrepaSim.R")
}
}
##### CONSTRUCTION DE L'INPUT POUR SIMULATION
# Met en forme le fichier Input.Par
# avec les parametres choisis et la matrice d'accouplement
# 1/ n transmis a la fonction MatingMatrix()
# 2/ t transmis a la fonction MatingMatrix()
# 3/ pop, taille de la popualtion simulee, qui sera arrondie a l'inferieur pour etre un multiple de la taille de la mating matrix
ConstructSimInput(n=10,t=4,pop=4000,name="Simulation")
write.table(f,"FreqAllelique.txt",col.names=F,row.names=F)
##### CONSTRUCTION DE L'INPUT POUR SIMULATION
# Met en forme le fichier Input.Par
# avec les parametres choisis et la matrice d'accouplement
# 1/ n transmis a la fonction MatingMatrix()
# 2/ t transmis a la fonction MatingMatrix()
# 3/ pop, taille de la popualtion simulee, qui sera arrondie a l'inferieur pour etre un multiple de la taille de la mating matrix
ConstructSimInput(n=10,t=4,pop=4000,name="Simulation")
allelFreq[[i]],digits=4
round(allelFreq[[i]],digits=4)
#----------------------------------#
# FREQUENCES ALLELIQUES ALLEMANDES
#----------------------------------
library(related)
info=read.table("uniqueGenotypesWithInfo.txt",h=T)
write.table(info[,1:17],"genotypeData.txt",sep=" ",col.names = FALSE,row.names = FALSE)
allelFreq=readgenotypedata("genotypeData.txt")$freqs
f=c()
for (i in 1:8) {
f=c(f,paste(unlist(t(round(allelFreq[[i]],digits=4))[2,]),collapse=" "))
}
write.table(f,"FreqAllelique.txt",col.names=F,row.names=F)
# DIRECTORIES
if (Sys.info()["sysname"]=="Darwin") {
setwd("/Volumes/Samsung_T5/INRA RHINO/R/AssignationThu/03_simulations/")
wd="/Volumes/Samsung_T5/INRA RHINO/R/AssignationThu/03_simulations/"
graphdir="/Volumes/Samsung_T5/INRA RHINO/R/Graph/"
Rdir="/Volumes/Samsung_T5/INRA RHINO/R/"
source("fonctionsPrepaSim.R")
}else {
if (Sys.info()["sysname"]=="Windows"){
setwd("E:/INRA RHINO/R/AssignationThu/03_simulations/")
wd="E:/INRA RHINO/R/AssignationThu/03_simulations/"
graphdir="E:/INRA RHINO/R/Graph/"
Rdir="E:/INRA RHINO/R/"
source("fonctionsPrepaSim.R")
}
}
##### CONSTRUCTION DE L'INPUT POUR SIMULATION
# Met en forme le fichier Input.Par
# avec les parametres choisis et la matrice d'accouplement
# 1/ n transmis a la fonction MatingMatrix()
# 2/ t transmis a la fonction MatingMatrix()
# 3/ pop, taille de la popualtion simulee, qui sera arrondie a l'inferieur pour etre un multiple de la taille de la mating matrix
ConstructSimInput(n=10,t=4,pop=4000,name="Simulation")
# 1/ Proba de detection
# Les individus sont retires aleatoirement du fichier COLONY2.DAT selon un tirage sans remise
# Proportion d'individus retires de chaque categorie fixee en argument
# - Unsampled, sous la forme d'un vecteur c(males, femelles, juv)
# Si les valeurs sont superieures a 1, elles sont prises comme des effectifs et non des proportions
# 2/ Erreurs de genotypages
# Sur les individus restants, une proportion d'entre eux est aleatoirement selectionnee pour avoir un genotype incomplet
# Les alleles sont retires selon une probabilite fixee en argument
# - propIncomplete (si proportion > 1, alors on considere que c'est un effectif a retirer)
# - probMissingLocus
CreateScenario(name="simRandomPopThu",unsampled=c(0.44,0.06,0.06),propIncomplete=0,probMissingLocus=0)
CreateScenario(name="simRandomPopThuIncomplete",unsampled=c(0.44,0.06,0.06),propIncomplete=0.4,probMissingLocus=2/16)
# Replication du jeu de donnees .Dat simule en n exemplaires identiques avec une graine aleatoire differente
replicateSim("simRandomPop",30)
# Replication du jeu de donnees .Dat simule en n exemplaires identiques avec une graine aleatoire differente
replicateSim("simRandomPopThu",30)
simShellCmd("simRandomPopThu",30)
replicateSim("simRandomPopThuIncomplete",30)
simShellCmd("simRandomPopThuIncomplete",30)
# DIRECTORIES
if (Sys.info()["sysname"]=="Darwin") {
setwd("/Volumes/Samsung_T5/INRA RHINO/R/AssignationThu/03_simulations/")
wd="/Volumes/Samsung_T5/INRA RHINO/R/AssignationThu/03_simulations/"
graphdir="/Volumes/Samsung_T5/INRA RHINO/R/Graph/"
Rdir="/Volumes/Samsung_T5/INRA RHINO/R/"
source("fonctionsPrepaSim.R")
}else {
if (Sys.info()["sysname"]=="Windows"){
setwd("E:/INRA RHINO/R/AssignationThu/03_simulations/")
wd="E:/INRA RHINO/R/AssignationThu/03_simulations/"
graphdir="E:/INRA RHINO/R/Graph/"
Rdir="E:/INRA RHINO/R/"
source("fonctionsPrepaSim.R")
}
}
simShellCmd("simRandomPopThu",30)
simShellCmd("simRandomPopThuIncomplete",30)
