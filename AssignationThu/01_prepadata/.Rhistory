success=0
for (l in 1:10) {
# tirage des deux groupes aleatoirement
sampling=sample(coins,26,replace=F)
gr1=sampling[1:n]
gr2=sampling[-(1:n)]
# pieces a retourner aleatoirement
gr1r=gr1*sample(c(rep(1,length.out=n-k),rep(-1,length.out=k)),n,replace=F)
gr2r=gr2*sample(c(rep(1,length.out=(26-n)-p),rep(-1,length.out=p)),26-n,replace=F)
if (sum(gr1r==1)==sum(gr2r==1)) { # teste l'egalite du nombre de faces
success=success+1
}
}
if (success==10) { # si on a obtenu egalite 10/10 fois
cat("Une bonne solution est n=",n,"k=",k,"et p=",p,"\n")
}
}
}
}
# tirage d'un jeu de donnees aleatoire
face=1 # nombre de faces, compris entre 0 et 26
coins=sample(c(rep(1,face),rep(-1,26-face)),26,replace=FALSE)
for (n in 1:26) { # n nombre de pieces des groupes
for (k in 0:n) {
for (p in 0:(26-n)) {
success=0
for (l in 1:10) {
# tirage des deux groupes aleatoirement
sampling=sample(coins,26,replace=F)
gr1=sampling[1:n]
gr2=sampling[-(1:n)]
# pieces a retourner aleatoirement
gr1r=gr1*sample(c(rep(1,length.out=n-k),rep(-1,length.out=k)),n,replace=F)
gr2r=gr2*sample(c(rep(1,length.out=(26-n)-p),rep(-1,length.out=p)),26-n,replace=F)
if (sum(gr1r==1)==sum(gr2r==1)) { # teste l'egalite du nombre de faces
success=success+1
}
}
if (success==10) { # si on a obtenu egalite 10/10 fois
cat("Une bonne solution est n=",n,"k=",k,"et p=",p,"\n")
}
}
}
}
# tirage d'un jeu de donnees aleatoire
face=10 # nombre de faces, compris entre 0 et 26
coins=sample(c(rep(1,face),rep(-1,26-face)),26,replace=FALSE)
for (n in 1:26) { # n nombre de pieces des groupes
for (k in 0:n) {
for (p in 0:(26-n)) {
success=0
for (l in 1:10) {
# tirage des deux groupes aleatoirement
sampling=sample(coins,26,replace=F)
gr1=sampling[1:n]
gr2=sampling[-(1:n)]
# pieces a retourner aleatoirement
gr1r=gr1*sample(c(rep(1,length.out=n-k),rep(-1,length.out=k)),n,replace=F)
gr2r=gr2*sample(c(rep(1,length.out=(26-n)-p),rep(-1,length.out=p)),26-n,replace=F)
if (sum(gr1r==1)==sum(gr2r==1)) { # teste l'egalite du nombre de faces
success=success+1
}
}
if (success==10) { # si on a obtenu egalite 10/10 fois
cat("Une bonne solution est n=",n,"k=",k,"et p=",p,"\n")
}
}
}
}
# tirage d'un jeu de donnees aleatoire
face=10 # nombre de faces, compris entre 0 et 26
coins=sample(c(rep(1,face),rep(-1,26-face)),26,replace=FALSE)
sum(coins==1)
coins=sample(c(rep(1,face),rep(-1,26-face)),26,replace=FALSE)
for (n in 1:26) { # n nombre de pieces des groupes
for (k in 0:n) {
for (p in 0:(26-n)) {
success=0
for (l in 1:10) {
# tirage des deux groupes aleatoirement
sampling=sample(coins,26,replace=F)
gr1=sampling[1:n]
gr2=sampling[-(1:n)]
# pieces a retourner aleatoirement
gr1r=gr1*sample(c(rep(1,length.out=n-k),rep(-1,length.out=k)),n,replace=F)
gr2r=gr2*sample(c(rep(1,length.out=(26-n)-p),rep(-1,length.out=p)),26-n,replace=F)
if (sum(gr1r==1)==sum(gr2r==1)) { # teste l'egalite du nombre de faces
success=success+1
}
}
if (success==10) { # si on a obtenu egalite 10/10 fois
cat("Une bonne solution est n=",n,"k=",k,"et p=",p,"\n")
}
}
}
}
# tirage d'un jeu de donnees aleatoire
coins=sample(c(rep(1,10),rep(-1,16)),26,replace=FALSE)
for (n in 1:26) { # n nombre de pieces des groupes
for (k in 0:n) {
for (p in 0:(26-n)) {
success=0
for (l in 1:10) {
# tirage des deux groupes aleatoirement
sampling=sample(coins,26,replace=F)
gr1=sampling[1:n]
gr2=sampling[-(1:n)]
# pieces a retourner aleatoirement
gr1r=gr1*sample(c(rep(1,length.out=n-k),rep(-1,length.out=k)),n,replace=F)
gr2r=gr2*sample(c(rep(1,length.out=(26-n)-p),rep(-1,length.out=p)),26-n,replace=F)
if (sum(gr1r==1)==sum(gr2r==1)) { # teste l'egalite du nombre de faces
success=success+1
}
}
if (success==10) { # si on a obtenu egalite 10/10 fois
cat("Une bonne solution est n=",n,"k=",k,"et p=",p,"\n")
}
}
}
}
face
26-face
c(rep(1,face),rep(-1,26-face)
)
summary(c(rep(1,face),rep(-1,26-face)))
levels(c(rep(1,face),rep(-1,26-face)))
a=c(rep(1,face),rep(-1,26-face))
sum(a==1)
sum(a==-1)
# tirage d'un jeu de donnees aleatoire
face=10 # nombre de faces, compris entre 0 et 26
coins=sample(c(rep(1,face),rep(-1,26-face)),26,replace=FALSE)
for (n in 1:26) { # n nombre de pieces des groupes
for (k in 0:n) {
for (p in 0:(26-n)) {
success=0
for (l in 1:10) {
# tirage des deux groupes aleatoirement
sampling=sample(coins,26,replace=F)
gr1=sampling[1:n]
gr2=sampling[-(1:n)]
# pieces a retourner aleatoirement
gr1r=gr1*sample(c(rep(1,length.out=n-k),rep(-1,length.out=k)),n,replace=F)
gr2r=gr2*sample(c(rep(1,length.out=(26-n)-p),rep(-1,length.out=p)),26-n,replace=F)
if (sum(gr1r==1)==sum(gr2r==1)) { # teste l'egalite du nombre de faces
success=success+1
}
}
if (success==10) { # si on a obtenu egalite 10/10 fois
cat("Une bonne solution est n=",n,"k=",k,"et p=",p,"\n")
}
}
}
}
# tirage d'un jeu de donnees aleatoire
face=10 # nombre de faces, compris entre 0 et 26
coins=sample(c(rep(1,face),rep(-1,26-face)),26,replace=FALSE)
for (n in 1:26) { # n nombre de pieces des groupes
for (k in 0:n) {
for (p in 0:(26-n)) {
success=0
for (l in 1:10) {
# tirage des deux groupes aleatoirement
sampling=sample(coins,26,replace=F)
gr1=sampling[1:n]
gr2=sampling[-(1:n)]
# pieces a retourner aleatoirement
gr1r=gr1*sample(c(rep(1,length.out=n-k),rep(-1,length.out=k)),n,replace=F)
gr2r=gr2*sample(c(rep(1,length.out=(26-n)-p),rep(-1,length.out=p)),26-n,replace=F)
if (sum(gr1r==1)==sum(gr2r==1)) { # teste l'egalite du nombre de faces
success=success+1
}
}
if (success==10) { # si on a obtenu egalite 10/10 fois
cat("Une bonne solution est n=",n,"k=",k,"et p=",p,"\n")
}
}
}
}
# tirage d'un jeu de donnees aleatoire
face=10 # nombre de faces, compris entre 0 et 26
coins=sample(c(rep(1,face),rep(-1,26-face)),26,replace=FALSE)
for (n in 1:26) { # n nombre de pieces des groupes
for (k in 0:n) {
for (p in 0:(26-n)) {
success=0
for (l in 1:10) {
# tirage des deux groupes aleatoirement
sampling=sample(coins,26,replace=F)
gr1=sampling[1:n]
gr2=sampling[-(1:n)]
# pieces a retourner aleatoirement
gr1r=gr1*sample(c(rep(1,length.out=n-k),rep(-1,length.out=k)),n,replace=F)
gr2r=gr2*sample(c(rep(1,length.out=(26-n)-p),rep(-1,length.out=p)),26-n,replace=F)
if (sum(gr1r==1)==sum(gr2r==1)) { # teste l'egalite du nombre de faces
success=success+1
}
}
if (success==10) { # si on a obtenu egalite 10/10 fois
cat("Une bonne solution est n=",n,"k=",k,"et p=",p,"\n")
}
}
}
}
# tirage d'un jeu de donnees aleatoire
face=5 # nombre de faces, compris entre 0 et 26
coins=sample(c(rep(1,face),rep(-1,26-face)),26,replace=FALSE)
for (n in 1:26) { # n nombre de pieces des groupes
for (k in 0:n) {
for (p in 0:(26-n)) {
success=0
for (l in 1:10) {
# tirage des deux groupes aleatoirement
sampling=sample(coins,26,replace=F)
gr1=sampling[1:n]
gr2=sampling[-(1:n)]
# pieces a retourner aleatoirement
gr1r=gr1*sample(c(rep(1,length.out=n-k),rep(-1,length.out=k)),n,replace=F)
gr2r=gr2*sample(c(rep(1,length.out=(26-n)-p),rep(-1,length.out=p)),26-n,replace=F)
if (sum(gr1r==1)==sum(gr2r==1)) { # teste l'egalite du nombre de faces
success=success+1
}
}
if (success==10) { # si on a obtenu egalite 10/10 fois
cat("Une bonne solution est n=",n,"k=",k,"et p=",p,"\n")
}
}
}
}
coins=sample(c(rep(1,face),rep(-1,26-face)),26,replace=FALSE)
for (n in 1:26) { # n nombre de pieces des groupes
for (k in 0:n) {
for (p in 0:(26-n)) {
success=0
for (l in 1:20) {
# tirage des deux groupes aleatoirement
sampling=sample(coins,26,replace=F)
gr1=sampling[1:n]
gr2=sampling[-(1:n)]
# pieces a retourner aleatoirement
gr1r=gr1*sample(c(rep(1,length.out=n-k),rep(-1,length.out=k)),n,replace=F)
gr2r=gr2*sample(c(rep(1,length.out=(26-n)-p),rep(-1,length.out=p)),26-n,replace=F)
if (sum(gr1r==1)==sum(gr2r==1)) { # teste l'egalite du nombre de faces
success=success+1
}
}
if (success==20) { # si on a obtenu egalite 10/10 fois
cat("Une bonne solution est n=",n,"k=",k,"et p=",p,"\n")
}
}
}
}
for (n in 1:26) { # n nombre de pieces des groupes
for (k in 0:n) {
for (p in 0:(26-n)) {
success=0
for (l in 1:20) {
# tirage des deux groupes aleatoirement
sampling=sample(coins,26,replace=F)
gr1=sampling[1:n]
gr2=sampling[-(1:n)]
# pieces a retourner aleatoirement
gr1r=gr1*sample(c(rep(1,length.out=n-k),rep(-1,length.out=k)),n,replace=F)
gr2r=gr2*sample(c(rep(1,length.out=(26-n)-p),rep(-1,length.out=p)),26-n,replace=F)
if (sum(gr1r==1)==sum(gr2r==1)) { # teste l'egalite du nombre de faces
success=success+1
}
}
if (success==20) { # si on a obtenu egalite 10/10 fois
cat("Une bonne solution est n=",n,"k=",k,"et p=",p,"\n")
}
}
}
}
for (n in 1:26) { # n nombre de pieces des groupes
for (k in 0:n) {
for (p in 0:(26-n)) {
success=0
for (l in 1:100) {
# tirage des deux groupes aleatoirement
sampling=sample(coins,26,replace=F)
gr1=sampling[1:n]
gr2=sampling[-(1:n)]
# pieces a retourner aleatoirement
gr1r=gr1*sample(c(rep(1,length.out=n-k),rep(-1,length.out=k)),n,replace=F)
gr2r=gr2*sample(c(rep(1,length.out=(26-n)-p),rep(-1,length.out=p)),26-n,replace=F)
if (sum(gr1r==1)==sum(gr2r==1)) { # teste l'egalite du nombre de faces
success=success+1
}
}
if (success==100) { # si on a obtenu egalite 10/10 fois
cat("Une bonne solution est n=",n,"k=",k,"et p=",p,"\n")
}
}
}
}
# tirage d'un jeu de donnees aleatoire
face=25 # nombre de faces, compris entre 0 et 26
coins=sample(c(rep(1,face),rep(-1,26-face)),26,replace=FALSE)
for (n in 1:26) { # n nombre de pieces des groupes
for (k in 0:n) {
for (p in 0:(26-n)) {
success=0
for (l in 1:100) {
# tirage des deux groupes aleatoirement
sampling=sample(coins,26,replace=F)
gr1=sampling[1:n]
gr2=sampling[-(1:n)]
# pieces a retourner aleatoirement
gr1r=gr1*sample(c(rep(1,length.out=n-k),rep(-1,length.out=k)),n,replace=F)
gr2r=gr2*sample(c(rep(1,length.out=(26-n)-p),rep(-1,length.out=p)),26-n,replace=F)
if (sum(gr1r==1)==sum(gr2r==1)) { # teste l'egalite du nombre de faces
success=success+1
}
}
if (success==100) { # si on a obtenu egalite 10/10 fois
cat("Une bonne solution est n=",n,"k=",k,"et p=",p,"\n")
}
}
}
}
sample(180,replace=FALSE)
cite()
citation()
install.packages(c("ade4", "backports", "callr", "curl", "dbplyr", "digest", "haven", "hms", "irlba", "knitr", "lme4", "MASS", "Matrix", "mgcv", "msm", "mvtnorm", "openssl", "plotrix", "quantreg", "Rcpp", "reprex", "reshape2", "rlang", "rpart", "rprojroot", "sp", "spatstat", "spData", "spdep", "tibble", "tidyr", "viridisLite", "xml2", "yaml", "zoo"))
27/2
27/4
3/4
*27
(3/4)*27
(2.303*c(6.75,13.5,20.25))
(2.303*c(6.75,13.5,20.25))/30
X=(2.303*c(6.75,13.5,20.25))/30
percent=100*((X*27)/27)
percent
percent=((X*27)/27)
percent
percent=100*(X/27)
percent
0.06*27
X=(2.303*c(6.75,13.5,20.25))/30
percent=100*(X/27)
percent
percent*27
percent*27/100
(percent*27/100)*10
(percent*27/100)
(percent*27/100)*10
# CI_95
binom.test(0,162)$conf.int
females=274+148+259
total=females+246+136+267
females/total # sex-ratio
binom.test(females,total)$conf.int # IC du sex-ratio
install.packages("adegenet")
install.packages("tidyverse")
?tidyverse
library(tidyverse)
install.packages("readxl")
install.packages(c("BH", "bindr", "Brobdingnag", "callr", "curl", "DBI", "dbplyr", "forcats", "hms", "igraph", "knitr", "LearnBayes", "lme4", "lubridate", "MASS", "mgcv", "msm", "nlme", "officer", "openssl", "phangorn", "pillar", "plogr", "quantreg", "Rcpp", "RcppEigen", "rlang", "rmarkdown", "rpart", "scatterplot3d", "selectr", "spData", "stringi", "stringr", "tidyselect", "untb", "withr", "yaml"))
install.packages("rcolony")
install.packages("rcolony", repos="http://R-Forge.R-project.org")
library(rcolony)
?rcolony
help("rcolony")
run.colony(colonyexecpath="/Users/feral/Dropbox/M1 EFCE/Stage/colony2.Mac",datfilepath="prompt",wait=FALSE,monitor=TRUE)
data(testdata)
View(testdata)
run.colony(colonyexecpath="/Users/feral/Dropbox/M1 EFCE/Stage/colony2.Mac",datfilepath="/Users/feral/Dropbox/M1 EFCE/Stage/colony2.Mac/colony2.dat",wait=FALSE,monitor=TRUE)
run.colony(colonyexecpath="/Users/feral/Dropbox/M1 EFCE/Stage/colony2.Mac",datfilepath="prompt",wait=FALSE,monitor=TRUE)
run.colony(colonyexecpath="/Users/feral/Dropbox/M1 EFCE/Stage/colony2.Mac",datfilepath="prompt",wait=FALSE,monitor=TRUE)
run.colony(colonyexecpath="/Users/feral/Dropbox/M1 EFCE/Stage/colony2.Mac",datfilepath="/Users/feral/Dropbox/M1 EFCE/Stage/colony2.Mac/colony2.dat",wait=FALSE,monitor=TRUE)
get.parentage(testdata)
str(get.parentage(testdata))
summary(get.parentage(testdata))
?dredge
?t.perm
?t.perm()
?perm.t
install.packages("rmarkdown")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
pressure
install.packages("devtools")
devtools::install_github("ismayc/thesisdown")
devtools::install_github("sebastiansauer/yart")
install.packages("adegenet")
install.packages("hierfstat")
install.packages("ggmap")
library(ggplot2)
library(ggmap)
?qmap
qmap("Picardy")
qmap("Picardie")
citation("adegenet")
4/12
cite
cite()
citation()
version()
rstudio.version()
RStudio.Version()
citation("hierfstat")
citation("adegenet")
print(citation("adegenet"),
bibtex=TRUE)
print(citation("vegan"),
bibtex=TRUE)
Rdir="/Volumes/Samsung_T5/INRA RHINO/R/"
if (Sys.info()["sysname"]=="Darwin") {
wd="/Volumes/Samsung_T5/INRA RHINO/R/01_prepadata/"
graphdir="/Volumes/Samsung_T5/INRA RHINO/R/Graph/"
Rdir="/Volumes/Samsung_T5/INRA RHINO/R/"
setwd(wd)
}else {
if (Sys.info()["sysname"]=="Windows"){
wd="E:/INRA RHINO/R/Assignation/01_prepadata/"
graphdir="E:/INRA RHINO/R/Graph/"
Rdir="E:/INRA RHINO/R/"
setwd(wd)
}
}
if (Sys.info()["sysname"]=="Darwin") {
wd="/Volumes/Samsung_T5/INRA RHINO/R/01_prepadata/"
graphdir="/Volumes/Samsung_T5/INRA RHINO/R/Graph/"
Rdir="/Volumes/Samsung_T5/INRA RHINO/R/"
setwd(wd)
}else {
if (Sys.info()["sysname"]=="Windows"){
wd="E:/INRA RHINO/R/Assignation/01_prepadata/"
graphdir="E:/INRA RHINO/R/Graph/"
Rdir="E:/INRA RHINO/R/"
setwd(wd)
}
}
setwd("/Volumes/Samsung_T5/INRA RHINO/R/Assignation/01_prepadata")
#-------------------------------#
# Nombre d'alleles par marqueur
#-------------------------------
genotypes=read.table("uniqueGenotypesWithInfo.txt",h=T)
for (i in seq(2,18,2)) {
cat(colnames(genotypes)[i]," : ",length(unique(as.vector(t(genotypes[,i:(i+1)]))))-1,"\n") # nombre d'elements - 1 a cause des zeros
}
#-------------------------------#
# Description des effectifs
#-------------------------------
effectifs=read.table("effectifs.txt",h=T)
# total number of juveniles
juv=length(genotypes$idind[which(genotypes$ageWhenFirstCaptur=="Juv" & genotypes$yearWhenFirstCaptur==2013)])
binom.test(c(sum(genotypes$ageWhenFirstCaptur=="Juv"),sum(genotypes$ageWhenFirstCaptur=="Adult")))
# total number of candidate fathers
fa=length(genotypes$idind[which(genotypes$ageWhenFirstCaptur=="Adult" & genotypes$sexe=="M" & genotypes$yearWhenFirstCaptur==2013)])
# total number of candidate mothers
mo=length(genotypes$idind[which(genotypes$ageWhenFirstCaptur=="Adult" & genotypes$sexe=="F" & genotypes$yearWhenFirstCaptur==2013)])
# proportion of each
juv/(juv+fa+mo)
fa/(juv+fa+mo)
mo/(juv+fa+mo)
# Proportion of males par colonie
colSex=c()
colF=c()
colTot=c()
for (c in col) {
colSex=c(colSex,binom.test(c(sum(genotypes$sexe=="F" & genotypes$idcol==c & genotypes$ageWhenFirstCaptur=="Adult"),
sum(genotypes$sexe=="M" & genotypes$idcol==c & genotypes$ageWhenFirstCaptur=="Adult")))$estimate)
colF=c(colF,sum(genotypes$sexe=="F" & genotypes$idcol==c))
colTot=c(colTot,sum(genotypes$idcol==c))
}
# mean population size of colonies
col=c('CXSGT','M244','M399','M809','M811','M813','M815','M831','M1079','M1102','M1106',
'M1112','M1113','M1551','M1975','M1979','PP1','PP3')
colsize=c()
# for (c in col) {
#   colsize=c(colsize,length(which(genotypes$idcol==c & genotypes$yearWhenFirstCaptur==2013)))
# }
for (c in col) {
colsize=c(colsize,length(which(genotypes$idcol==c)))
}
colsize=as.data.frame(colsize)
colsize=t(colsize)
colnames(colsize)=col
colsize
# Effectif moyen d'une colonie
meanCol=mean(colsize)
meanCol
sqrt(var(as.vector(colsize)))
sdCol=sd(colsize)
sdCol
IC=meanCol+c(-1,1)*1.96*sdCol/sqrt(length(col))
IC
# Proportion of males par colonie
colSex=c()
colF=c()
colTot=c()
for (c in col) {
colSex=c(colSex,binom.test(c(sum(genotypes$sexe=="F" & genotypes$idcol==c & genotypes$ageWhenFirstCaptur=="Adult"),
sum(genotypes$sexe=="M" & genotypes$idcol==c & genotypes$ageWhenFirstCaptur=="Adult")))$estimate)
colF=c(colF,sum(genotypes$sexe=="F" & genotypes$idcol==c))
colTot=c(colTot,sum(genotypes$idcol==c))
}
colSex
colF
colTot
#-------------------------------#
# Sex ratio
#-------------------------------
# n males/n females
(colTot-colF)/colF
mean((colTot-colF)/colF)
