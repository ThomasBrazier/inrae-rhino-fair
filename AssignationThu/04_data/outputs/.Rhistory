offsp = offsp[which(!(offsp[, 1] %in% excludedCol) &
!(offsp[, 1] %in% excludedCol)), 1]
fathers = fathers[which(!(fathers %in% excludedCol) &
!(fathers %in% excludedCol))]
dyadsH0 = data.frame(offspring = offsp)
colnames(dyadsH0) = "offspring"
pb = txtProgressBar(min=0, max=nit, style=3)
for (it in 1:nit) {
# calculer H0
# Tirer pour chaque juvenile un pere parmi tous les peres, toutes colonies confondues
dyadsH0$father = sample(fathers, size = nrow(dyadsH0), replace = TRUE)
# pour chaque couple calculer la distance en km entre colonies
# formule : ACOS(SIN(lat1)*SIN(lat2)+COS(lat1)*COS(lat2)*COS(lon2-lon1))*6371
coordCol = read.table("coordpic.txt", h = T)
# coordCol$Lat=coordCol$Lat*pi/180
# coordCol$Long=coordCol$Long*pi/180
library(geosphere)
for (i in 1:nrow(dyadsH0)) {
# dyadsH0$distance[i]=acos(sin(coordCol$Lat[which(coordCol$Colonie==as.character(dyadsH0$offspring[i]))])*sin(coordCol$Lat[which(coordCol$Colonie==as.character(dyadsH0$father[i]))])+cos(coordCol$Lat[which(coordCol$Colonie==as.character(dyadsH0$offspring[i]))])*cos(coordCol$Lat[which(coordCol$Colonie==as.character(dyadsH0$father[i]))])*cos(coordCol$Long[which(coordCol$Colonie==as.character(dyadsH0$father[i]))]-coordCol$Long[which(coordCol$Colonie==as.character(dyadsH0$offspring[i]))]))*6371
# create distance matrix
dyadsH0$distance[i] = distCosine(cbind(coordCol$Long[which(coordCol$Colonie ==
as.character(dyadsH0$offspring[i]))], coordCol$Lat[which(coordCol$Colonie ==
as.character(dyadsH0$offspring[i]))]),
cbind(coordCol$Long[which(coordCol$Colonie == as.character(dyadsH0$father[i]))], coordCol$Lat[which(coordCol$Colonie ==
as.character(dyadsH0$father[i]))]),
r = 6378137) / 1000
}
vecF=c() # vecteur des freq cumulees pour chaque classe de distance
for (d in 1:length(interval)){
vecF[d]=sum(dyadsH0$distance<=interval[d])/nrow(dyadsH0)
}
bootH0[,it]=vecF
setTxtProgressBar(pb,it)
}
pb = txtProgressBar(min=0, max=nit, style=3)
for (it in 1:nit) {
# calculer H0
# Tirer pour chaque juvenile un pere parmi tous les peres, toutes colonies confondues
dyadsH0$father = sample(fathers, size = nrow(dyadsH0), replace = TRUE)
# pour chaque couple calculer la distance en km entre colonies
# formule : ACOS(SIN(lat1)*SIN(lat2)+COS(lat1)*COS(lat2)*COS(lon2-lon1))*6371
coordCol = read.table("coord.txt", h = T)
# coordCol$Lat=coordCol$Lat*pi/180
# coordCol$Long=coordCol$Long*pi/180
library(geosphere)
for (i in 1:nrow(dyadsH0)) {
# dyadsH0$distance[i]=acos(sin(coordCol$Lat[which(coordCol$Colonie==as.character(dyadsH0$offspring[i]))])*sin(coordCol$Lat[which(coordCol$Colonie==as.character(dyadsH0$father[i]))])+cos(coordCol$Lat[which(coordCol$Colonie==as.character(dyadsH0$offspring[i]))])*cos(coordCol$Lat[which(coordCol$Colonie==as.character(dyadsH0$father[i]))])*cos(coordCol$Long[which(coordCol$Colonie==as.character(dyadsH0$father[i]))]-coordCol$Long[which(coordCol$Colonie==as.character(dyadsH0$offspring[i]))]))*6371
# create distance matrix
dyadsH0$distance[i] = distCosine(cbind(coordCol$Long[which(coordCol$Colonie ==
as.character(dyadsH0$offspring[i]))], coordCol$Lat[which(coordCol$Colonie ==
as.character(dyadsH0$offspring[i]))]),
cbind(coordCol$Long[which(coordCol$Colonie == as.character(dyadsH0$father[i]))], coordCol$Lat[which(coordCol$Colonie ==
as.character(dyadsH0$father[i]))]),
r = 6378137) / 1000
}
vecF=c() # vecteur des freq cumulees pour chaque classe de distance
for (d in 1:length(interval)){
vecF[d]=sum(dyadsH0$distance<=interval[d])/nrow(dyadsH0)
}
bootH0[,it]=vecF
setTxtProgressBar(pb,it)
}
close(pb)
# Tableau de resultats contenant les bornes inf-sup de l'IC a 95% de la distribution H0
icH0=as.data.frame(matrix(NA,ncol=3,nrow=length(interval)))
icH0[,1]=interval
for (i in 1:nrow(icH0)) {
icH0[i,2]=mean(unlist(bootH0[i,]))
icH0[i,3]=quantile(unlist(bootH0[i,]),0.025)
icH0[i,4]=quantile(unlist(bootH0[i,]),0.975)
}
colnames(icH0)=c("distance","meanFreq","lowerIC","upperIC")
write.table(icH0,"icH0.txt",col.name=TRUE,row.names=TRUE)
# BOOTSTRAP MEAN DISPERSAL DISTANCE UNDER H0
boots=numeric(10000)
for (i in 1:10000){
boots[i]=mean(sample(dyadsH0$distance,replace=T))
}
hist(boots)
limBoot1=quantile(boots,c(.025,.975))
limBoot1
ICDispersalH0=limBoot1
mboot=mean(boots)
mboot
meanDispersalH0=mboot
etboot=sqrt(var(boots))
etboot
mboot+c(-1,1)*qnorm(1-0.025)*etboot
etDispersalH0=etboot
# Dresser une liste de couples offspring-father retrouves par Colony (parente validee selon critere a definir)
# offspm=read.table("04_data/outputs/colRun1/RhinoThomas2.Paternity",h=T,fill=TRUE)
# dyadsObs=data.frame(offspring=offspm$OffspringID,father=offspm$InferredDad1,distance=rep(NA,nrow(offspm)))
dyadsObs=read.table("Paternity.txt",h=F)
colnames(dyadsObs)=c("offspring","father")
# echanger les individus contre leurs colonies
info=read.table("uniqueGenotypesWithInfo.txt",h=T)
dyadsObs$fatherID=dyadsObs$father
for(i in 1:nrow(dyadsObs)){
dyadsObs$offspring[i]=as.character(info$idcol[which(info$idind==dyadsObs$offspring[i])])
dyadsObs$father[i]=as.character(info$idcol[which(info$idind==dyadsObs$father[i])])
}
# enlever les individus (pere ou offspring) venant d'une des colonies exclues
# dyads impossibles ,"M1979","M1975","CXSGT","M1079"
excludedCol=c("M399")
dyadsObs=dyadsObs[which(!(dyadsObs$offspring %in% excludedCol)),]
dyadsObs=dyadsObs[which(!(dyadsObs$father %in% excludedCol)),]
# pour chaque couple calculer la distance en km entre colonies
# formule : ACOS(SIN(lat1)*SIN(lat2)+COS(lat1)*COS(lat2)*COS(lon2-lon1))*6371
coordCol=read.table("coordpic.txt",h=T)
# pour chaque couple calculer la distance en km entre colonies
# formule : ACOS(SIN(lat1)*SIN(lat2)+COS(lat1)*COS(lat2)*COS(lon2-lon1))*6371
coordCol=read.table("coord.txt",h=T)
# coordCol$Lat=coordCol$Lat*pi/180
# coordCol$Long=coordCol$Long*pi/180
library(geosphere)
for (i in 1:nrow(dyadsObs)) {
# dyadsH0$distance[i]=acos(sin(coordCol$Lat[which(coordCol$Colonie==as.character(dyadsH0$offspring[i]))])*sin(coordCol$Lat[which(coordCol$Colonie==as.character(dyadsH0$father[i]))])+cos(coordCol$Lat[which(coordCol$Colonie==as.character(dyadsH0$offspring[i]))])*cos(coordCol$Lat[which(coordCol$Colonie==as.character(dyadsH0$father[i]))])*cos(coordCol$Long[which(coordCol$Colonie==as.character(dyadsH0$father[i]))]-coordCol$Long[which(coordCol$Colonie==as.character(dyadsH0$offspring[i]))]))*6371
# create distance matrix
dyadsObs$distance[i]=distCosine(cbind(coordCol$Long[which(coordCol$Colonie==as.character(dyadsObs$offspring[i]))],coordCol$Lat[which(coordCol$Colonie==as.character(dyadsObs$offspring[i]))]),
cbind(coordCol$Long[which(coordCol$Colonie==as.character(dyadsObs$father[i]))],coordCol$Lat[which(coordCol$Colonie==as.character(dyadsObs$father[i]))]),
r=6378137)/1000
}
#-------------------------------#
#   EXPORT DATA TO GRAPH
#-------------------------------
write.table(dyadsH0,"dyadsH0.txt",col.names=TRUE,row.names=FALSE)
# Run observed distribution with a threshold of 0.3
write.table(dyadsObs,"dyadsObsSelect.txt",col.names=TRUE,row.names=FALSE)
# And then rerun it with a threshold of 0
write.table(dyadsObs,"dyadsObs.txt",col.names=TRUE,row.names=FALSE)
#creation d'un vecteur "boots" comprenant 1000 elements, pour le moment tous des "0"
boots=numeric(10000)
#petite boucle qui va reechantillonner 1000 fois avec remise les donnees comprises dans
#le vecteur dyadsObs$distance, et calculer a chaque fois la moyenne des valeurs reechantillonnees
for (i in 1:10000){
boots[i]=mean(sample(dyadsObs$distance,replace=T))
}
#trace l'histogramme de boot
hist(boots)
#calcule l'intervalle de confiance comme les 2,5% et 97,5% percentiles de la distribution
#de boots
limBoot1=quantile(boots,c(.025,.975))
limBoot1
ICDispersal=limBoot1
abline(v=limBoot1,col="red")
#calcule la moyenne, l'ecart-type et l'erreur standard apres bootstrap et les range dans
#des variables
mboot=mean(boots)
mboot
meanDispersal=mboot
etboot=sqrt(var(boots))
etboot
mboot+c(-1,1)*qnorm(1-0.025)*etboot
etDisperal=etboot
####### Import data
# ALL NECESSARY DATA IS INCLUDED IN THIS FILES WRITEN EACH TIME YOU RUNNED THE PREVIOUS SCRIPT.
# YOU DON'T HAVE TO RERUN PREVIOUS SCRIPT FOR COMPUTING THE PLOT
dyadsH0=read.table("dyadsH0.txt",header=TRUE)
dyadsObsSelect=read.table("dyadsObsSelect.txt",header=TRUE)
dyadsObs=read.table("dyadsObs.txt",header=TRUE)
meanDispersal=11.32188
icH0=read.table("icH0.txt",header=TRUE)
##### Fitted distribution are estimated in the Dispersal kernel directory
# Cumulative density function from fitdistrplus and exponential distribution
z=seq(0,100,by=0.01)
lambda=0.10013465
lambdaInf=0.07614281
lambdaSup=0.13780406
yfit=function( z ){1-exp(-1*lambda*z)}
yfitInf=function( z ){1-exp(-1*lambdaInf*z)}
yfitSup=function( z ){1-exp(-1*lambdaSup*z)}
# Cumulative density function from fitdistrplus and gamma distribution
a=1
b=9.970022
yfitGamma=function( z ){pgamma(z,shape=a,scale=b)}
# Cumulative density function from MasterBayes estimates
lambda2=0.4704699
lambda2Inf=0.8413
lambda2Sup=0.2828
ybayes=function( z ){1-exp(-1*lambda2*z)}
ybayesInf=function( z ){1-exp(-1*lambda2Inf*z)}
ybayesSup=function( z ){1-exp(-1*lambda2Sup*z)}
#####################
# DYADS RELATIVE FREQUENCY IN FUNCTION OF DISTANCE
#####################
df=data.frame(d=c(sort(dyadsH0$distance),sort(dyadsObs$distance),sort(dyadsObsSelect$distance)),
freq=c(seq(1,length(dyadsH0$distance),1)/length(dyadsH0$distance),seq(1,length(dyadsObs$distance),1)/length(dyadsObs$distance),seq(1,length(dyadsObsSelect$distance),1)/length(dyadsObsSelect$distance)),
dist=c(rep("H0",length(dyadsH0$distance)),rep("Obs",length(dyadsObs$distance)),rep("ObsSelect",length(dyadsObsSelect$distance)))
)
write.table(df,"distancesDist.txt",row.names=FALSE,col.names=TRUE)
df1=df[which(df$dist=="H0"),]
df2=df[which(df$dist=="Obs"),]
df3=df[which(df$dist=="ObsSelect"),]
ggplot(data=df1, aes(x=d, y=freq)) +
stat_function(fun = yfit)+
stat_function(fun = yfitInf,lty=2)+
stat_function(fun = yfitSup,lty=2)+
# stat_function(fun = yfitGamma,size=1.5,lty=3)+
stat_function(fun = ybayes,colour="grey")+
stat_function(fun = ybayesInf,colour="grey",lty=2)+
stat_function(fun = ybayesSup,colour="grey",lty=2)+
# geom_point(aes(color="expected"),size=4)+
geom_ribbon(data=icH0,aes(x=distance,y=meanFreq,ymin=lowerIC, ymax=upperIC),alpha=0.5) +
# geom_point(data=df2,aes(color="observed"),size=4) +
geom_point(data=df3,aes(color="observed with selection")) +
# geom_line(data=icH0,aes(x=distance,y=lowerIC),color="grey",size=1.5) +
# geom_line(data=icH0,aes(x=distance,y=upperIC),color="grey",size=1.5) +
scale_colour_manual(values=c("black"))+
ylim(0,1) +
# scale_x_continuous(breaks=c(0,round(meanDispersal,digits=1),20,40,60),limits=c(0,60)) +
# ggtitle(paste("Distribution of offspring-father distances\n(n=",nrow(df3),")"))+
xlab("Geographic distance (km)") + ylab("Dyads relative frequency") +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(color="black", size=14, face="bold.italic",hjust = 0.5),
axis.title.x = element_text(color="black", size=14),
axis.title.y = element_text(color="black", size=14),
axis.text=element_text(size=14, colour="black"),
legend.key = element_rect(fill = "white", size = 1),
legend.key.height = unit(2,"line"),
legend.key.width = unit(5,"line"),
legend.text=element_text(size=14),
legend.title=element_text(size=14),
legend.position='none')
#---------------#
# EXPECTED UNDER H0
#---------------
# Dresser une liste de couples offspring-father
# Dresser une liste des vrais offsprings (tous les juveniles assignes a une mere ou un pere)
# 2 OPTIONS
# 1/ tous les vrais juveniles, i.e. juveniles pour lesquels il y a un pere ou mere retrouve
offsp = c(Maternities[, 1], Paternities[, 1])
offsp = as.vector(t(unique(offsp)))
# Faible nombre d'échantillons, donc estimation par reechantillonnage de la proportion de paternite intracoloniale sous H0
nperm=10000
somme=0 # somme totale des pater intra col pour nperm
listP=c() # liste des pater intra col pour chaque iteration
# echanger les individus contre leurs colonies
info=read.table("uniqueGenotypesWithInfo.txt",h=T)
for(i in 1:length(offsp)){
offsp[i]=as.character(info$idcol[which(info$idind==offsp[i])])
}
# Dresser une liste des peres (tous les peres candidats)
fathers=paternity[,2]
fathers=as.vector(t(fathers))
for(i in 1:length(fathers)){
fathers[i]=as.character(info$idcol[which(info$idind==fathers[i])])
}
# enlever les individus (pere ou offspring) venant d'une colonie exclue
# M399
excludedCol=c("M399")
offsp=offsp[which(!(offsp %in% excludedCol) & !(offsp %in% excludedCol))]
fathers=fathers[which(!(fathers %in% excludedCol) & !(fathers %in% excludedCol))]
# create progress bar
pb <- txtProgressBar(min = 0, max = nperm, style = 3)
for (n in 1:nperm) {
# Distribution attendue pour chaque colonie
# Pas de reechantillonnage sur les juveniles (lien avec la colonie)
# Tirer pour chaque pere un juvenile parmi tous les juveniles, toutes colonies confondues
dyadsH0=data.frame(father=fathers)
colnames(dyadsH0)=c("father")
dyadsH0$offspring=sample(offsp,size=nrow(dyadsH0),replace=TRUE)
# condition : $intracol=TRUE si pere et offspring sont de la meme colonie
dyadsH0$intracol=(dyadsH0$offspring==dyadsH0$father)
# Proportion of intracolonial paternity
listP=c(listP,sum(dyadsH0$intracol==TRUE))
somme=somme+sum(dyadsH0$intracol==TRUE)
# update progress bar
setTxtProgressBar(pb,n)
}
close(pb)
hist(listP)
# proportion de paternite intra-coloniale
propIntra=(somme/nperm)/length(fathers)
propIntra*100
mean(listP)/length(fathers) # proportion moy par bootstrap
#trace l'histogramme de boot
hist(listP)
#calcule l'intervalle de confiance comme les 2,5% et 97,5% percentiles de la distribution
limBoot1=quantile(listP,c(.025,.975))
limBoot1/length(fathers)
abline(v=limBoot1,col="red")
#---------------#
# OBSERVED
#---------------
# Dresser une liste de couples offspring-father retrouves par Colony (parente validee selon critere a definir)
# offspm=read.table("04_data/outputs/colRun1/RhinoThomas2.Paternity",h=T,fill=TRUE)
# dyadsObs=data.frame(offspring=offspm$OffspringID,father=offspm$InferredDad1,distance=rep(NA,nrow(offspm)))
dyadsObs=read.table("Paternity.txt",h=F)
colnames(dyadsObs)=c("offspring","father")
# echanger les individus contre leurs colonies
info=read.table("uniqueGenotypesWithInfo.txt",h=T)
for(i in 1:nrow(dyadsObs)){
dyadsObs$offspring[i]=as.character(info$idcol[which(info$idind==dyadsObs$offspring[i])])
dyadsObs$father[i]=as.character(info$idcol[which(info$idind==dyadsObs$father[i])])
}
# enlever les individus (pere ou offspring) venant d'une des 5 colonies exclues
# dyads impossibles ,"M1979","M1975","CXSGT","M1079"
excludedCol=c("M399")
dyadsObs=dyadsObs[which(!(dyadsObs$offspring %in% excludedCol)),]
dyadsObs=dyadsObs[which(!(dyadsObs$father %in% excludedCol)),]
# condition : $intracol=TRUE si pere et offspring sont de la meme colonie
dyadsObs$intracol=(dyadsObs$offspring==dyadsObs$father)
# number of parents of same colony
sum(dyadsObs$intracol==TRUE)
# number of parents of a different colony
sum(dyadsObs$intracol==FALSE)
# Proportion of intracolonial paternity
sum(dyadsObs$intracol==TRUE)/length(dyadsObs$intracol)
mean(dyadsObs$intracol)
# ESTIMATION DU POURCENTAGE PAR BOOTSTRAP
nperm=10000
boots=numeric(nperm)
pb <- txtProgressBar(min = 0, max = nperm, style = 3)
for (i in 1:nperm){
boots[i]=mean(sample(dyadsObs$intracol,replace=T)) # moyenne des TRUE equivalente a proportion
setTxtProgressBar(pb, i)
}
close(pb)
hist(boots)
limBoot1=quantile(boots,c(.025,.975))
limBoot1
abline(v=limBoot1,col="red")
mboot
mboot=mean(boots)
etboot=sqrt(var(boots))
##### GGPLOT2
# TOUTES COLONIES ENSEMBLE
require(ggplot2)
df=data.frame(distr=c("H0","Obs"),intracol=c(propIntra,sum(dyadsObs$intracol==TRUE)/length(dyadsObs$intracol)))
ggplot(data=df, aes(x=distr, y=intracol)) +
geom_bar(stat="identity", width=0.5)+
ylim(0,1)+ ggtitle("Intra-colonial paternity percentage\nobserved and expected under random mating",
subtitle=paste("n=",nrow(dyadsObs),sep=""))+
xlab("Distribution") + ylab("Intra-colonial paternity percentage") +
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(color="black", size=34, face="bold.italic",hjust = 0.5),
plot.subtitle = element_text(color="black", size=30,hjust = 0.5),
axis.title.x = element_text(color="black", size=30),
axis.title.y = element_text(color="black", size=30),
axis.text=element_text(size=26, colour="black"),
legend.key = element_rect(fill = "white", size = 1),
legend.key.height = unit(2,"line"),
legend.key.width = unit(5,"line"),
legend.text=element_text(size=30),
legend.title=element_text(size=30))
# DIRECTORIES
if (Sys.info()["sysname"]=="Darwin") {
wd="/Volumes/Samsung_T5/INRA RHINO/R/Assignation/"
set(wd)
source("fonctionsSim.R")
datadir="/Volumes/Samsung_T5/INRA RHINO/R/Assignation/04_data/outputs/"
graphdir="/Volumes/Samsung_T5/INRA RHINO/R/Graph"
Rdir="/Volumes/Samsung_T5/INRA RHINO/R/"
setwd(datadir)
require(ggplot2)
require(ggpubr)
}else {
if (Sys.info()["sysname"]=="Windows"){
wd="E:/INRA RHINO/R/Assignation/"
setwd(wd)
source("fonctionsSim.R")
datadir="E:/INRA RHINO/R/Assignation/04_data/outputs/"
graphdir="E:/INRA RHINO/R/Graph"
Rdir="E:/INRA RHINO/R/"
setwd(datadir)
require(ggplot2)
require(ggpubr)
}
}
# DIRECTORIES
if (Sys.info()["sysname"]=="Darwin") {
wd="/Volumes/Samsung_T5/INRA RHINO/R/Assignation Framework/"
set(wd)
source("fonctionsSim.R")
datadir="/Volumes/Samsung_T5/INRA RHINO/R/Assignation Framework/04_data/outputs/"
graphdir="/Volumes/Samsung_T5/INRA RHINO/R/Graph"
Rdir="/Volumes/Samsung_T5/INRA RHINO/R/"
setwd(datadir)
require(ggplot2)
require(ggpubr)
}else {
if (Sys.info()["sysname"]=="Windows"){
wd="E:/INRA RHINO/R/Assignation Framework/"
setwd(wd)
source("fonctionsSim.R")
datadir="E:/INRA RHINO/R/Assignation Framework/04_data/outputs/"
graphdir="E:/INRA RHINO/R/Graph"
Rdir="E:/INRA RHINO/R/"
setwd(datadir)
require(ggplot2)
require(ggpubr)
}
}
#-----------------------------#
# SENSITIVITY ANALYSES
# COUNT TABLES
#-----------------------------
# tableau de comptage des individus dans les differentes categories (true, type I or II error...)
# pour chaque simulation
# tableau de comparaison des nombres d'individus moyens et SD sur n runs
# saved dans le fichier simSensitivity.txt
# 1/ path = simulations a comparer
# 2/ run = nombre de runs utilises pour les estimations
tabSensitivity=sensitivityResults(path=c("Simulation"),30)
#-----------------------------#
# SENSITIVITY ANALYSES
# COUNT TABLES
#-----------------------------
# tableau de comptage des individus dans les differentes categories (true, type I or II error...)
# pour chaque simulation
# tableau de comparaison des nombres d'individus moyens et SD sur n runs
# saved dans le fichier simSensitivity.txt
# 1/ path = simulations a comparer
# 2/ run = nombre de runs utilises pour les estimations
tabSensitivity=sensitivityResults(path=c("simRandomPop"),30)
View(tabSensitivity)
#-----------------------------#
# CONSTRUCTION DE LA DISTRIBUTION DE LA STAT ~ NOMBRE DE RUNS
#-----------------------------
# Pour les stats sur les probabilities de Colony
# en arguments :
# 1/ path, le chemin du dossier d'outputs
# 2/ nombre de runs
# 3/ stat : "mean","median","var"
distMean=statBestF("simRandomPop",run=30,stat="mean")
# Pour le nombre d'occurences du meilleur pere
# en arguments :
# 1/ path, le chemin du dossier d'outputs
# 2/ nombre de runs
distOcc=occurenceBestF("simRandomPop",30)
# Pour le nombre d'occurences de la meilleure mere
# en arguments :
# 1/ path, le chemin du dossier d'outputs
# 2/ nombre de runs
distOcc=occurenceBestM("simRandomPop",30)
simResults=simResultsWithInfo(path="simRandomPop")
# DIRECTORIES
if (Sys.info()["sysname"]=="Darwin") {
wd="/Volumes/Samsung_T5/INRA RHINO/R/AssignationThu/"
set(wd)
source("fonctionsSim.R")
datadir="/Volumes/Samsung_T5/INRA RHINO/R/AssignationThu/04_data/outputs/"
graphdir="/Volumes/Samsung_T5/INRA RHINO/R/Graph"
Rdir="/Volumes/Samsung_T5/INRA RHINO/R/"
setwd(datadir)
require(ggplot2)
require(ggpubr)
}else {
if (Sys.info()["sysname"]=="Windows"){
wd="E:/INRA RHINO/R/AssignationThu/"
setwd(wd)
source("fonctionsSim.R")
datadir="E:/INRA RHINO/R/AssignationThu/04_data/outputs/"
graphdir="E:/INRA RHINO/R/Graph"
Rdir="E:/INRA RHINO/R/"
setwd(datadir)
require(ggplot2)
require(ggpubr)
}
}
distOcc=occurenceBestF("simRandomPopIncomplete",30)
# DIRECTORIES
if (Sys.info()["sysname"]=="Darwin") {
wd="/Volumes/Samsung_T5/INRA RHINO/R/AssignationThu/"
set(wd)
source("fonctionsSim.R")
datadir="/Volumes/Samsung_T5/INRA RHINO/R/AssignationThu/04_data/outputs/"
graphdir="/Volumes/Samsung_T5/INRA RHINO/R/Graph"
Rdir="/Volumes/Samsung_T5/INRA RHINO/R/"
setwd(datadir)
require(ggplot2)
require(ggpubr)
}else {
if (Sys.info()["sysname"]=="Windows"){
wd="E:/INRA RHINO/R/AssignationThu/"
setwd(wd)
source("fonctionsSim.R")
datadir="E:/INRA RHINO/R/AssignationThu/04_data/outputs/"
graphdir="E:/INRA RHINO/R/Graph"
Rdir="E:/INRA RHINO/R/"
setwd(datadir)
require(ggplot2)
require(ggpubr)
}
}
distOcc=occurenceBestF("simRandomPopIncomplete",30)
distOcc=occurenceBestF("simRandomPopThuIncomplete",30)
write.table(distOcc,file="occurencesBestMotherIncompleteGen.txt",quote=F,row.names = F,col.names = T)
write.table(distOcc,file="occurencesBestFatherIncompleteGen.txt",quote=F,row.names = F,col.names = T)
write.table(distOcc,file="occurencesBestFatherIncompleteGen.txt",quote=F,row.names = F,col.names = T)
#-----------------------------#
# CONSTRUCTION DE LA DISTRIBUTION DE LA STAT ~ NOMBRE DE RUNS
#-----------------------------
# Pour les stats sur les probabilities de Colony
# en arguments :
# 1/ path, le chemin du dossier d'outputs
# 2/ nombre de runs
# 3/ stat : "mean","median","var"
distMean=statBestF("simRandomPopThuIncomplete",run=30,stat="mean")
write.table(distMean,file="meanBestFather.txt",quote=F,row.names = F,col.names = F)
distMedian=statBestF("simRandomPopThuIncomplete",run=30,stat="median")
write.table(distMedian,file="medianBestFather.txt",quote=F,row.names = F,col.names = F)
distVar=statBestF("simRandomPopThuIncomplete",run=30,stat="var")
write.table(distVar,file="varBestFather.txt",quote=F,row.names = F,col.names = F)
