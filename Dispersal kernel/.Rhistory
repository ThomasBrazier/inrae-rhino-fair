PdP=PdataPed(formula=list(var1,res1,res2), data=Phen, USsire=FALSE)
tP=tunePed(beta=30)
model=MCMCped(PdP=PdP, GdP=GdP, sP=startParam, tP=tP, nitt=300, thin=1, burnin=0, jointP=FALSE)
# model=MCMCped(PdP=PdP, GdP=GdP, sP=startParam, tP=tP, nitt=300, thin=1, burnin=0,mm.tol=2,jointP=FALSE)
plot(model$beta)
# Genotyping errors
plot(model$E1)
plot(model$E2)
# Unsampled fathers
summary(model$USsire)
# posterior distribution of pedigree/ marginal distribution of parents
# one matrix per offsrping : parents in lines and columns
# in each cell, the number of itreations where parents are find as parents of the offspring
summary(model$P)
summary(model$beta)
# USsire = TRUE for unsampled fathers
PdP=PdataPed(formula=list(var1,res1,res2), data=Phen, USsire=TRUE)
model=MCMCped(PdP=PdP, GdP=GdP, sP=startParam, tP=tP, nitt=300, thin=1, burnin=0, jointP=FALSE)
# model=MCMCped(PdP=PdP, GdP=GdP, sP=startParam, tP=tP, nitt=300, thin=1, burnin=0,mm.tol=2,jointP=FALSE)
plot(model$beta)
summary(model$beta)
# Unsampled fathers
summary(model$USsire)
# USsire = TRUE for unsampled fathers
PdP=PdataPed(formula=list(var1,res1,res2), data=Phen, USdams=TRUE, USsire=TRUE)
# USsire = TRUE for unsampled fathers
PdP=PdataPed(formula=list(var1,res1,res2), data=Phen, USdam=TRUE, USsire=TRUE)
model=MCMCped(PdP=PdP, GdP=GdP, sP=startParam, tP=tP, nitt=300, thin=1, burnin=0, jointP=FALSE)
startParam=startPed(E1=0.05, estE1=TRUE, E2=0.05, estE2=TRUE,USsire=2000,USdam=500,estUSdam = TRUE ,estUSsire=TRUE)
model=MCMCped(PdP=PdP, GdP=GdP, sP=startParam, tP=tP, nitt=300, thin=1, burnin=0, jointP=FALSE)
startParam=startPed(E1=0.05, estE1=TRUE, E2=0.05, estE2=TRUE,USsire=2000,,estUSsire=TRUE)
# USsire = TRUE for unsampled fathers
PdP=PdataPed(formula=list(var1,res1,res2), data=Phen,USsire=TRUE)
startParam=startPed(E1=0.05, estE1=TRUE, E2=0.05, estE2=TRUE,USsire=2000,estUSsire=TRUE)
# USsire = TRUE for unsampled fathers
PdP=PdataPed(formula=list(var1,res1,res2), data=Phen,USsire=TRUE)
model=MCMCped(PdP=PdP, GdP=GdP, sP=startParam, tP=tP, nitt=300, thin=1, burnin=0, jointP=FALSE)
# model=MCMCped(PdP=PdP, GdP=GdP, sP=startParam, tP=tP, nitt=300, thin=1, burnin=0,mm.tol=2,jointP=FALSE)
plot(model$beta)
summary(model$beta)
# Unsampled fathers
summary(model$USsire)
# Genotyping errors
plot(model$E1)
plot(model$E2)
gc(reset=TRUE) # freeing memory allocation : MCMCPed need a lot of memory
Gen=info[which(info$yearWhenFirstCaptur==2013),1:17]
GdP=GdataPed(Gen[,2:17],Gen[,1],marker.type="MSW")
# paternity is to be modelled as a function of distance
# between offspring and male territories
var1=expression(varPed(c("lat","long"), gender="Male",
relational="OFFSPRING"))
# individuals from the offspring generation are excluded as parents
res1=expression(varPed("offspring", restrict=0))
# individuals from the offspring generation or before (cohort equal or inferior) are excluded as parents
# res1=expression(varPed("cohort", restrict=">"))
# mothers not from the offspring territory are excluded
# offspring colonies provide information for the mother estimates
res2=expression(varPed("col", gender="Female", relational="OFFSPRING",
restrict="=="))
# ALLELIC FREQUENCIES
# can be incorporated in the model
# START PARAMETERS
# E1 : dropout rates
# E2 : misstyping errors
locus=read.table("Picardy/Input Locus 2.txt",header=TRUE)
startParam=startPed(E1=0.05, estE1=TRUE, E2=0.05, estE2=TRUE,USsire=2000,estUSsire=TRUE)
# startParam=startPed(G=Gen[,2:17], id=Gen[,1], E1=locus[2,], estE1=TRUE, E2=locus[3,], estE2=TRUE,estG=FALSE,
#                     estUSsire=TRUE,USsire=2000)
Phen=info[which(info$yearWhenFirstCaptur==2013),c(1,18:19,21,30:33)]
colnames(Phen)=c("id","col","sex","year","long","lat","offspring","cohort")
# USsire = TRUE for unsampled fathers
PdP=PdataPed(formula=list(var1,res1,res2), data=Phen,USsire=TRUE)
tP=tunePed(beta=30)
model=MCMCped(PdP=PdP, GdP=GdP, sP=startParam, tP=tP, nitt=300, thin=1, burnin=0, jointP=FALSE)
summary(model$beta)
model1=MCMCped(PdP=PdP, GdP=GdP, sP=startParam, tP=tP, nitt=11000, thin=1, burnin=1000, jointP=FALSE)
# model=MCMCped(PdP=PdP, GdP=GdP, sP=startParam, tP=tP, nitt=300, thin=1, burnin=0,mm.tol=2,jointP=FALSE)
plot(model1$beta)
summary(model1$beta)
# Unsampled fathers
summary(model1$USsire)
summary(model$E1)
# Genotyping errors
plot(model1$E1)
summary(model1$E1)
plot(model1$E2)
summary(model1$E2)
#----------------------------------#
# HOMOZYGOSITY IN EMPIRICAL DATA SET
#----------------------------------
# For all individuals :
info=read.table("uniqueGenotypesWithInfoPic99.txt", h = T)
# DIRECTORIES
# Working directories
# New users need to configure correct pathways
if (Sys.info()["sysname"]=="Darwin") {
wd="/Volumes/Samsung_T5/INRA RHINO/R/Homozygosity/"
setwd(wd)
datadir="/Volumes/Samsung_T5/INRA RHINO/R/Assignation/"
graphdir="/Volumes/Samsung_T5/INRA RHINO/R/Graph/"
Rdir="/Volumes/Samsung_T5/INRA RHINO/R/"
}else {
if (Sys.info()["sysname"]=="Windows"){
wd="E:/INRA RHINO/R/Homozygosity/"
setwd(wd)
datadir="E:/INRA RHINO/R/Assignation/"
graphdir="E:/INRA RHINO/R/Graph/"
Rdir="E:/INRA RHINO/R/"
}
}
#----------------------------------#
# HOMOZYGOSITY IN EMPIRICAL DATA SET
#----------------------------------
# For all individuals :
info=read.table("uniqueGenotypesWithInfoPic99.txt", h = T)
View(info)
hoAll=data.frame(info[,c(1:17,19)])
View(hoAll)
hoAll=data.frame(info[,c(1:17,19)])
for (i in 1:nrow(hoAll)) {
g=hoAll[i,2:17] # vecteur genotype
ho[i,19]=sum(c(g[1]==g[2],g[3]==g[4],g[5]==g[6],g[7]==g[8],g[9]==g[10],g[11]==g[12],g[13]==g[14],g[15]==g[16]))/8
}
hoAll=data.frame(info[,c(1:17,19)])
hoAll[,19]=rep(NA,nrow(hoAll))
for (i in 1:nrow(hoAll)) {
g=hoAll[i,2:17] # vecteur genotype
hoAll[i,19]=sum(c(g[1]==g[2],g[3]==g[4],g[5]==g[6],g[7]==g[8],g[9]==g[10],g[11]==g[12],g[13]==g[14],g[15]==g[16]))/8
}
# Mean proportion of homozygosity in full population
mean(hoAll[,19])
# PLOT HISTOGRAM
hist(hoAll[,19], xlab="Proportion of homozygous loci", main="Homozygosity for all individuals")
par(mfrow=c(1,1))
# PLOT HISTOGRAM
hist(hoAll[,19], xlab="Proportion of homozygous loci", main="Homozygosity for all individuals")
par(mfrow=c(1,2))
hist(ho[which(ho$sex=="M"),3], xlab="Proportion of homozygous loci", main="Homozygosity of inferred males")
hist(ho[which(ho$sex=="F"),3], xlab="Proportion of homozygous loci", main="Homozygosity of inferred females")
par(mfrow=c(1,1))
# PLOT HISTOGRAM
par(mfrow=c(1,3))
hist(hoAll[,19], xlab="Proportion of homozygous loci", main="Homozygosity for all individuals")
hist(ho[which(ho$sex=="M"),3], xlab="Proportion of homozygous loci", main="Homozygosity of inferred males")
hist(ho[which(ho$sex=="F"),3], xlab="Proportion of homozygous loci", main="Homozygosity of inferred females")
par(mfrow=c(1,1))
View(PdP)
View(Phen)
# DIRECTORIES
# Working directories
# New users need to configure correct pathways
if (Sys.info()["sysname"]=="Darwin") {
wd="/Volumes/Samsung_T5/INRA RHINO/R/MasterBayes/"
graphdir="/Volumes/Samsung_T5/INRA RHINO/R/Graph/"
Rdir="/Volumes/Samsung_T5/INRA RHINO/R/"
setwd(wd)
#-------------------------------#
# LOADING PACKAGE
#-------------------------------
library(MasterBayes)
}else {
if (Sys.info()["sysname"]=="Windows"){
wd="E:/INRA RHINO/R/MasterBayes/"
graphdir="E:/INRA RHINO/R/Graph/"
Rdir="E:/INRA RHINO/R/"
setwd(wd)
#-------------------------------#
# LOADING PACKAGE
#-------------------------------
library(MasterBayes)
}
}
##########################
# Year 2013 ONLY (memory limitation)
info=read.table("Picardy/uniqueGenotypesWithInfo79.txt",header=TRUE,stringsAsFactors = FALSE)
coord=read.table("Picardy/coordpic.txt",header=TRUE)
# IMPROVING DATA SET WITH SUPPLEMENTARY INFOS
# Add coordinates
info$long=rep(NA,nrow(info))
info$lat=rep(NA,nrow(info))
for (i in 1:nrow(info)) {
info[i,30:31]=unlist(coord[which(as.character(coord[,1])==as.character(info[i,18])),2:3])
}
View(info)
# CONVERSION DES COORDONNEES AU SYSTEME CARTESIEN (km)
cartesian=as.data.frame(info[,30:31])
colnames(cartesian)=c("long","lat")
library(sp)
library(rgdal)
coordinates(cartesian) <- c("long", "lat") # Creates a SpatialPoints object where x
# and y are the coordinates, assuming that "x" is the horizontal coordinate
# and "y" is the vertical one
proj4string(cartesian) <- CRS("+proj=longlat + ellps=WGS84") # This sets the
# projection of the data, assuming that you are using the WGS84 ellipsoid
# (if you do not know for sure, it is a safe assumption)
cartesian=spTransform(cartesian,CRS="+proj=utm +zone=27 +datum=WGS84") # Use
# whatever UTM zone you need.
cartesian=as.data.frame(coordinates(cartesian)) # This converts the SpatialPoints
info[,30:31]=cartesian
# Logical for offspring
info$offspring=rep(NA,nrow(info))
for (i in 1:nrow(info)) {
if(info$ageWhenFirstCaptur[i]=="Juv"){
info$offspring[i]=1
}else{
info$offspring[i]=0
}
}
# Indicating cohort for multigenerational analyses
# only for offspring
# parents are -1 (birth year is unknwon)
info$cohort=rep(NA,nrow(info))
for (i in 1:nrow(info)) {
if(info$offspring[i]==1){
info$cohort[i]=(info$yearWhenFirstCaptur[i]-min(info$yearWhenFirstCaptur))+1
}else{
info$cohort[i]=0
}
}
# Sexe information at the correct format
for(i in 1:nrow(info)){
if(info[i,19]=='F'){
info[i,19]=as.character("Female")
}else{
info[i,19]=as.character("Male")
}
}
gc(reset=TRUE) # freeing memory allocation : MCMCPed need a lot of memory
Gen=info[which(info$yearWhenFirstCaptur==2013),1:17]
GdP=GdataPed(Gen[,2:17],Gen[,1],marker.type="MSW")
# paternity is to be modelled as a function of distance
# between offspring and male territories
var1=expression(varPed(c("lat","long"), gender="Male",
relational="OFFSPRING"))
# individuals from the offspring generation are excluded as parents
res1=expression(varPed("offspring", restrict=0))
# individuals from the offspring generation or before (cohort equal or inferior) are excluded as parents
# res1=expression(varPed("cohort", restrict=">"))
# mothers not from the offspring territory are excluded
# offspring colonies provide information for the mother estimates
res2=expression(varPed("col", gender="Female", relational="OFFSPRING",
restrict="=="))
# ALLELIC FREQUENCIES
# can be incorporated in the model
# START PARAMETERS
# E1 : dropout rates
# E2 : misstyping errors
locus=read.table("Picardy/Input Locus 2.txt",header=TRUE)
startParam=startPed(E1=0.05, estE1=TRUE, E2=0.05, estE2=TRUE,USsire=2000,estUSsire=TRUE)
# startParam=startPed(G=Gen[,2:17], id=Gen[,1], E1=locus[2,], estE1=TRUE, E2=locus[3,], estE2=TRUE,estG=FALSE,
#                     estUSsire=TRUE,USsire=2000)
Phen=info[which(info$yearWhenFirstCaptur==2013),c(1,18:19,21,30:33)]
colnames(Phen)=c("id","col","sex","year","long","lat","offspring","cohort")
# USsire = TRUE for unsampled fathers
PdP=PdataPed(formula=list(var1,res1,res2), data=Phen,USsire=TRUE)
tP=tunePed(beta=30)
model=MCMCped(PdP=PdP, GdP=GdP, sP=startParam, tP=tP, nitt=300, thin=1, burnin=0, jointP=FALSE)
summary(model$beta)
model1=MCMCped(PdP=PdP, GdP=GdP, sP=startParam, tP=tP, nitt=11000, thin=1, burnin=1000, jointP=FALSE)
# DIRECTORIES
# Working directories
# New users need to configure correct pathways
if (Sys.info()["sysname"]=="Darwin") {
wd="/Volumes/Samsung_T5/INRA RHINO/R/Homozygosity/"
setwd(wd)
datadir="/Volumes/Samsung_T5/INRA RHINO/R/Assignation/"
graphdir="/Volumes/Samsung_T5/INRA RHINO/R/Graph/"
Rdir="/Volumes/Samsung_T5/INRA RHINO/R/"
}else {
if (Sys.info()["sysname"]=="Windows"){
wd="E:/INRA RHINO/R/Homozygosity/"
setwd(wd)
datadir="E:/INRA RHINO/R/Assignation/"
graphdir="E:/INRA RHINO/R/Graph/"
Rdir="E:/INRA RHINO/R/"
}
}
info=read.table("uniqueGenotypesWithInfoPic99.txt", h = T)
hoAll=data.frame(info[which(info$ageWhenFisrtCaptur=="Adult"),c(1:17,19)])
hoAll[,19]=rep(NA,nrow(hoAll))
for (i in 1:nrow(hoAll)) {
g=hoAll[i,2:17] # vecteur genotype
hoAll[i,19]=sum(c(g[1]==g[2],g[3]==g[4],g[5]==g[6],g[7]==g[8],g[9]==g[10],g[11]==g[12],g[13]==g[14],g[15]==g[16]))/8
}
# On results from assignment by COLONY
empiricalResPic=read.table(paste(datadir,"Pic_resultsWithInfo.txt",sep=""),header=TRUE)
# Proportions of homozygote loci per individual in categories :
# all, true fathers, wrong fathers, true mothers, wrong mothers
ho=data.frame(id=c(unique(as.character(empiricalResPic$father[which(!is.na(empiricalResPic$father))])),
unique(as.character(empiricalResPic$mother[which(!is.na(empiricalResPic$mother))]))),
sex=c(rep("M",length(unique(as.character(empiricalResPic$father[which(!is.na(empiricalResPic$father))])))),
rep("F",length(unique(as.character(empiricalResPic$mother[which(!is.na(empiricalResPic$mother))]))))))
for (i in 1:nrow(ho)) {
# about genotypes
# columns 5 to 20  are for father genotype
# columns 21 to 36 are for mother genotype
if (ho$sex[i]=="M"){
g=empiricalResPic[min(which(as.character(empiricalResPic[,2])==as.character(ho$id[i]))),4:19] # vecteur genotype
ho[i,3]=sum(c(g[1]==g[2],g[3]==g[4],g[5]==g[6],g[7]==g[8],g[9]==g[10],g[11]==g[12],g[13]==g[14],g[15]==g[16]))/8
}else {
g=empiricalResPic[min(which(as.character(empiricalResPic[,3])==as.character(ho$id[i]))),20:35] # vecteur genotype
ho[i,3]=sum(c(g[1]==g[2],g[3]==g[4],g[5]==g[6],g[7]==g[8],g[9]==g[10],g[11]==g[12],g[13]==g[14],g[15]==g[16]))/8
}
}
# Mean proportion of homozygosity in full population
mean(hoAll[,19])
# Mean proportion of homozygosity for true males and wrong males
mean(ho[which(ho$sex=="M"),3])
# Mean proportion of homozygosity for true females and wrong females
mean(ho[which(ho$sex=="F"),3])
# PLOT HISTOGRAM
par(mfrow=c(1,3))
hist(hoAll[,19], xlab="Proportion of homozygous loci", main="Homozygosity of all adults individuals")
hist(ho[which(ho$sex=="M"),3], xlab="Proportion of homozygous loci", main="Homozygosity of inferred males")
hist(ho[which(ho$sex=="F"),3], xlab="Proportion of homozygous loci", main="Homozygosity of inferred females")
par(mfrow=c(1,1))
#----------------------------------#
# HOMOZYGOSITY IN EMPIRICAL DATA SET
#----------------------------------
# For all individuals :
info=read.table("uniqueGenotypesWithInfoPic99.txt", h = T)
hoAll=data.frame(info[which(info$ageWhenFisrtCaptur=="Adult"),c(1:17,19)])
hoAll[,19]=rep(NA,nrow(hoAll))
which(info$ageWhenFisrtCaptur=="Adult")
hoAll=data.frame(info[which(info$ageWhenFirstCaptur=="Adult"),c(1:17,19)])
hoAll[,19]=rep(NA,nrow(hoAll))
for (i in 1:nrow(hoAll)) {
g=hoAll[i,2:17] # vecteur genotype
hoAll[i,19]=sum(c(g[1]==g[2],g[3]==g[4],g[5]==g[6],g[7]==g[8],g[9]==g[10],g[11]==g[12],g[13]==g[14],g[15]==g[16]))/8
}
# On results from assignment by COLONY
empiricalResPic=read.table(paste(datadir,"Pic_resultsWithInfo.txt",sep=""),header=TRUE)
# Proportions of homozygote loci per individual in categories :
# all, true fathers, wrong fathers, true mothers, wrong mothers
ho=data.frame(id=c(unique(as.character(empiricalResPic$father[which(!is.na(empiricalResPic$father))])),
unique(as.character(empiricalResPic$mother[which(!is.na(empiricalResPic$mother))]))),
sex=c(rep("M",length(unique(as.character(empiricalResPic$father[which(!is.na(empiricalResPic$father))])))),
rep("F",length(unique(as.character(empiricalResPic$mother[which(!is.na(empiricalResPic$mother))]))))))
for (i in 1:nrow(ho)) {
# about genotypes
# columns 5 to 20  are for father genotype
# columns 21 to 36 are for mother genotype
if (ho$sex[i]=="M"){
g=empiricalResPic[min(which(as.character(empiricalResPic[,2])==as.character(ho$id[i]))),4:19] # vecteur genotype
ho[i,3]=sum(c(g[1]==g[2],g[3]==g[4],g[5]==g[6],g[7]==g[8],g[9]==g[10],g[11]==g[12],g[13]==g[14],g[15]==g[16]))/8
}else {
g=empiricalResPic[min(which(as.character(empiricalResPic[,3])==as.character(ho$id[i]))),20:35] # vecteur genotype
ho[i,3]=sum(c(g[1]==g[2],g[3]==g[4],g[5]==g[6],g[7]==g[8],g[9]==g[10],g[11]==g[12],g[13]==g[14],g[15]==g[16]))/8
}
}
# Mean proportion of homozygosity in full population
mean(hoAll[,19])
# Mean proportion of homozygosity for true males and wrong males
mean(ho[which(ho$sex=="M"),3])
# Mean proportion of homozygosity for true females and wrong females
mean(ho[which(ho$sex=="F"),3])
# PLOT HISTOGRAM
par(mfrow=c(1,3))
hist(hoAll[,19], xlab="Proportion of homozygous loci", main="Homozygosity of all adults individuals")
hist(ho[which(ho$sex=="M"),3], xlab="Proportion of homozygous loci", main="Homozygosity of inferred males")
hist(ho[which(ho$sex=="F"),3], xlab="Proportion of homozygous loci", main="Homozygosity of inferred females")
par(mfrow=c(1,1))
library(distr)
?distr
11.3/2
# DIRECTORIES
# Working directories
# New users need to configure correct pathways
if (Sys.info()["sysname"]=="Darwin") {
wd="/Volumes/Samsung_T5/INRA RHINO/R/Distance kernel/"
setwd(wd)
datadir="/Volumes/Samsung_T5/INRA RHINO/R/Assignation/04_data/outputs/Colony79lociSansM399/"
graphdir="/Volumes/Samsung_T5/INRA RHINO/R/Graph/"
Rdir="/Volumes/Samsung_T5/INRA RHINO/R/"
}else {
if (Sys.info()["sysname"]=="Windows"){
wd="E:/INRA RHINO/R/Distance kernel/"
setwd(wd)
datadir="E:/INRA RHINO/R/Assignation/04_data/outputs/Colony79lociSansM399/"
graphdir="E:/INRA RHINO/R/Graph/"
Rdir="E:/INRA RHINO/R/"
}
}
# DIRECTORIES
# Working directories
# New users need to configure correct pathways
if (Sys.info()["sysname"]=="Darwin") {
wd="/Volumes/Samsung_T5/INRA RHINO/R/Distance kernel/"
setwd(wd)
datadir="/Volumes/Samsung_T5/INRA RHINO/R/Assignation/04_data/outputs/Colony79lociSansM399/"
graphdir="/Volumes/Samsung_T5/INRA RHINO/R/Graph/"
Rdir="/Volumes/Samsung_T5/INRA RHINO/R/"
}else {
if (Sys.info()["sysname"]=="Windows"){
wd="E:/INRA RHINO/R/Distance kernel/"
setwd(wd)
datadir="E:/INRA RHINO/R/Assignation/04_data/outputs/Colony79lociSansM399/"
graphdir="E:/INRA RHINO/R/Graph/"
Rdir="E:/INRA RHINO/R/"
}
}
wd="E:/INRA RHINO/R/Distance kernel/"
setwd(wd)
setwd("E:/INRA RHINO/R/Dispersal kernel")
#---------------------------------#
# EXPONENTIAL POWER
#---------------------------------
#representer le dispersal kernel à partir de la distance de dispersion moyenne
x=seq(0,100,by=0.01)
d=11.3 # distance de dispersion moyenne
b=2
tau=1
a=11.3/2
a=46
#Exponential
DistExp=AbscontDistribution(d = function( x ){(x/(a^2))*exp(-x/(a))},low1=0,up1=100)
#Probability for 80
p(DistExp)(60)
p(DistExp)(80)
par(mfrow=c(1,1))
y=d(DistExp)(x)
plot(y~x,type="l",axes=F,xlab="",ylab="")
axis(1)
axis(2)
title(xlab="Dispersal distance (km)", ylab="Relative probability of dispersal event")
#line obtained from fitdistrplus with fairon data
y2=function( x ){0.3777125*exp(-1*0.3777125*x)}
curve(y2,add=F,from=0,to=100,xlab="",ylab="")
axis(1)
axis(2)
title(xlab="Dispersal distance (km)", ylab="Probability of dispersal event")
#line obtained from fitdistrplus with fairon data
lambda=-46
y2=function( x ){lambda*exp(-1*lambda*x)}
curve(y2,add=F,from=0,to=100,xlab="",ylab="")
axis(1)
axis(2)
title(xlab="Dispersal distance (km)", ylab="Probability of dispersal event")
#line obtained from fitdistrplus with fairon data
lambda=5
y2=function( x ){lambda*exp(-1*lambda*x)}
curve(y2,add=F,from=0,to=100,xlab="",ylab="")
axis(1)
axis(2)
#line obtained from fitdistrplus with fairon data
lambda=46
y2=function( x ){lambda*exp(-1*lambda*x)}
curve(y2,add=F,from=0,to=100,xlab="",ylab="")
axis(1)
axis(2)
title(xlab="Dispersal distance (km)", ylab="Probability of dispersal event")
#line obtained from fitdistrplus with fairon data
lambda=0.00065
y2=function( x ){lambda*exp(-1*lambda*x)}
curve(y2,add=F,from=0,to=100,xlab="",ylab="")
axis(1)
axis(2)
title(xlab="Dispersal distance (km)", ylab="Probability of dispersal event")
#line obtained from fitdistrplus with fairon data
lambda=5.5
y2=function( x ){lambda*exp(-1*lambda*x)}
curve(y2,add=F,from=0,to=100,xlab="",ylab="")
axis(1)
axis(2)
title(xlab="Dispersal distance (km)", ylab="Probability of dispersal event")
#---------------------------------#
# EXPONENTIAL POWER
#---------------------------------
#representer le dispersal kernel à partir de la distance de dispersion moyenne
x=seq(0,100,by=0.01)
d=11.3 # distance de dispersion moyenne
b=2
tau=1
a=11.3/2
a=46
a=11.3/2
library(distr)
#Exponential
DistExp=AbscontDistribution(d = function( x ){(x/(a^2))*exp(-x/(a))},low1=0,up1=100)
#Probability for 80
p(DistExp)(60)
p(DistExp)(80)
par(mfrow=c(1,1))
y=d(DistExp)(x)
plot(y~x,type="l",axes=F,xlab="",ylab="")
axis(1)
axis(2)
title(xlab="Dispersal distance (km)", ylab="Relative probability of dispersal event")
lambda=5.5
y2=function( x ){(1/(2*pi*lambda^2))*exp(-x/lambda)}
curve(y2,add=F,from=0,to=100,xlab="",ylab="")
axis(1)
axis(2)
title(xlab="Dispersal distance (km)", ylab="Probability of dispersal event")
lambda=45
y2=function( x ){(1/(2*pi*lambda^2))*exp(-x/lambda)}
curve(y2,add=F,from=0,to=100,xlab="",ylab="")
axis(1)
axis(2)
title(xlab="Dispersal distance (km)", ylab="Probability of dispersal event")
# OR
lambda=5.5
y2=function( x ){(1/(2*pi*lambda^2))*exp(-x/lambda)}
curve(y2,add=F,from=0,to=100,xlab="",ylab="")
axis(1)
axis(2)
title(xlab="Dispersal distance (km)", ylab="Probability of dispersal event")
w=data("WarblerP")
w
View(WarblerP)
View(Phen)
